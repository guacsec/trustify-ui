// This file is auto-generated by @hey-api/openapi-ts

export const AdvisoryDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/SourceDocument",
        },
      ],
    },
    {
      type: "object",
      required: ["vulnerabilities", "average_severity", "average_score"],
      properties: {
        average_score: {
          type: ["number", "null"],
          format: "double",
          description:
            "Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.",
        },
        average_severity: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/Severity",
              description:
                "Average (arithmetic mean) severity of the advisory aggregated from *all* related vulnerability assertions.",
            },
          ],
        },
        vulnerabilities: {
          type: "array",
          items: {
            $ref: "#/components/schemas/AdvisoryVulnerabilitySummary",
          },
          description: "Vulnerabilities addressed within this advisory.",
        },
      },
    },
  ],
} as const;

export const AdvisoryHeadSchema = {
  type: "object",
  required: [
    "uuid",
    "identifier",
    "document_id",
    "issuer",
    "published",
    "withdrawn",
    "title",
    "labels",
  ],
  properties: {
    document_id: {
      type: "string",
      description:
        "The identifier of the advisory, as provided by the document.",
    },
    identifier: {
      type: "string",
      description:
        "The identifier of the advisory, as assigned by the issuing organization.",
    },
    issuer: {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/OrganizationSummary",
          description: `The issuer of the advisory, if known. If no issuer is able to be
determined, this field will not be included in a response.`,
        },
      ],
    },
    labels: {
      $ref: "#/components/schemas/Labels",
      description:
        "Informational labels attached by the system or users to this advisory.",
    },
    modified: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the advisory was last modified, if any.",
    },
    published: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the advisory was published, if any.",
    },
    title: {
      type: ["string", "null"],
      description:
        "The title of the advisory as assigned by the issuing organization.",
    },
    uuid: {
      type: "string",
      description: "The opaque UUID of the advisory.",
    },
    withdrawn: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the advisory was withdrawn, if any.",
    },
  },
} as const;

export const AdvisorySummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/SourceDocument",
          description:
            "Information pertaning to the underlying source document, if any.",
        },
      ],
    },
    {
      type: "object",
      required: ["average_severity", "average_score", "vulnerabilities"],
      properties: {
        average_score: {
          type: ["number", "null"],
          format: "double",
          description:
            "Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.",
        },
        average_severity: {
          type: ["string", "null"],
          description:
            "Average (arithmetic mean) severity of the advisory aggregated from *all* related vulnerability assertions.",
        },
        vulnerabilities: {
          type: "array",
          items: {
            $ref: "#/components/schemas/AdvisoryVulnerabilityHead",
          },
          description: "Vulnerabilities addressed within this advisory.",
        },
      },
    },
  ],
} as const;

export const AdvisoryVulnerabilityHeadSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["severity", "score"],
      properties: {
        score: {
          type: "number",
          format: "double",
          description: `The average (arithmetic mean) score this advisory assigns to
the particular vulnerability.`,
        },
        severity: {
          $ref: "#/components/schemas/Severity",
          description: `The English-language word description of the severity of the given
vulnerability, as asserted by the advisory, using the CVSS bucketing
ranges.

Critical: 9.0–10.0
High: 7.0–8.9
Medium: 4.0–6.9
Low: 0.1–3.9
None: 0`,
        },
      },
    },
  ],
} as const;

export const AdvisoryVulnerabilitySummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryVulnerabilityHead",
    },
    {
      type: "object",
      required: ["cvss3_scores"],
      properties: {
        cvss3_scores: {
          type: "array",
          items: {
            type: "string",
          },
          description: `All CVSS3 scores from the advisory for the given vulnerability.
May include several, varying by minor version of the CVSS3 vector.`,
        },
      },
    },
  ],
  description:
    "Summary of information from this advisory regarding a single specific vulnerability.",
} as const;

export const AiFlagsSchema = {
  type: "object",
  required: ["completions"],
  properties: {
    completions: {
      type: "boolean",
    },
  },
} as const;

export const AiToolSchema = {
  type: "object",
  required: ["name", "description", "parameters"],
  properties: {
    description: {
      type: "string",
    },
    name: {
      type: "string",
    },
    parameters: {},
  },
} as const;

export const AllRelatedQuerySchema = {
  type: "object",
  properties: {
    id: {
      type: ["string", "null"],
      format: "uuid",
      description: "Find by an ID of a package",
    },
    purl: {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/Purl",
          description: "Find by PURL",
        },
      ],
    },
  },
} as const;

export const AnalysisStatusSchema = {
  type: "object",
  required: ["sbom_count", "graph_count"],
  properties: {
    graph_count: {
      type: "integer",
      format: "int32",
    },
    sbom_count: {
      type: "integer",
      format: "int32",
    },
  },
} as const;

export const AncNodeSchema = {
  type: "object",
  required: ["sbom_id", "node_id", "relationship", "purl", "name", "version"],
  properties: {
    name: {
      type: "string",
    },
    node_id: {
      type: "string",
    },
    purl: {
      type: "string",
    },
    relationship: {
      type: "string",
    },
    sbom_id: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const AncestorSummarySchema = {
  type: "object",
  required: [
    "sbom_id",
    "node_id",
    "purl",
    "name",
    "version",
    "published",
    "document_id",
    "product_name",
    "product_version",
    "ancestors",
  ],
  properties: {
    ancestors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AncNode",
      },
    },
    document_id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    node_id: {
      type: "string",
    },
    product_name: {
      type: "string",
    },
    product_version: {
      type: "string",
    },
    published: {
      type: "string",
    },
    purl: {
      type: "string",
    },
    sbom_id: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const BasePurlDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BasePurlHead",
    },
    {
      type: "object",
      required: ["versions"],
      properties: {
        versions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VersionedPurlSummary",
          },
        },
      },
    },
  ],
} as const;

export const BasePurlHeadSchema = {
  type: "object",
  required: ["uuid", "purl"],
  properties: {
    purl: {
      $ref: "#/components/schemas/Purl",
      description: "The actual base PURL",
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The ID of the base PURL",
    },
  },
} as const;

export const BasePurlSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/BasePurlHead",
    },
    {
      type: "object",
    },
  ],
} as const;

export const BinaryByteSizeSchema = {
  type: "string",
} as const;

export const ChatMessageSchema = {
  type: "object",
  required: ["message_type", "content"],
  properties: {
    content: {
      type: "string",
    },
    internal_state: {
      type: ["string", "null"],
    },
    message_type: {
      $ref: "#/components/schemas/MessageType",
    },
  },
} as const;

export const ChatStateSchema = {
  type: "object",
  required: ["messages"],
  properties: {
    messages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ChatMessage",
      },
    },
  },
} as const;

export const ClearlyDefinedCurationImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      properties: {
        source: {
          type: "string",
        },
        types: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ClearlyDefinedPackageType",
          },
          uniqueItems: true,
        },
      },
    },
  ],
} as const;

export const ClearlyDefinedImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      properties: {
        source: {
          type: "string",
        },
        types: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ClearlyDefinedPackageType",
          },
          uniqueItems: true,
        },
      },
    },
  ],
} as const;

export const ClearlyDefinedPackageTypeSchema = {
  type: "string",
  enum: [
    "composer",
    "crate",
    "deb",
    "gem",
    "git",
    "go",
    "maven",
    "npm",
    "nuget",
    "pod",
    "pypi",
  ],
} as const;

export const CommonImporterSchema = {
  type: "object",
  required: ["period"],
  properties: {
    description: {
      type: ["string", "null"],
      description: "A description for users.",
    },
    disabled: {
      type: "boolean",
      description: "A flag to disable the importer, without deleting it.",
    },
    labels: {
      $ref: "#/components/schemas/Labels",
      description: "Labels which will be applied to the ingested documents.",
    },
    period: {
      type: "string",
      description: "The period the importer should be run.",
    },
  },
} as const;

export const CsafImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      required: ["source"],
      properties: {
        fetchRetries: {
          type: ["integer", "null"],
          minimum: 0,
        },
        ignoreMissing: {
          type: "boolean",
        },
        onlyPatterns: {
          type: "array",
          items: {
            type: "string",
          },
        },
        source: {
          type: "string",
        },
        v3Signatures: {
          type: "boolean",
        },
      },
    },
  ],
} as const;

export const CveImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      properties: {
        source: {
          type: "string",
        },
        startYear: {
          type: ["integer", "null"],
          format: "int32",
          minimum: 0,
        },
        years: {
          type: "array",
          items: {
            type: "integer",
            format: "int32",
            minimum: 0,
          },
          uniqueItems: true,
        },
      },
    },
  ],
} as const;

export const CweImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      properties: {
        source: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const DepNodeSchema = {
  type: "object",
  required: [
    "sbom_id",
    "node_id",
    "relationship",
    "purl",
    "name",
    "version",
    "deps",
  ],
  properties: {
    deps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DepNode",
      },
    },
    name: {
      type: "string",
    },
    node_id: {
      type: "string",
    },
    purl: {
      type: "string",
    },
    relationship: {
      type: "string",
    },
    sbom_id: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const DepSummarySchema = {
  type: "object",
  required: [
    "sbom_id",
    "node_id",
    "purl",
    "name",
    "version",
    "published",
    "document_id",
    "product_name",
    "product_version",
    "deps",
  ],
  properties: {
    deps: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DepNode",
      },
    },
    document_id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    node_id: {
      type: "string",
    },
    product_name: {
      type: "string",
    },
    product_version: {
      type: "string",
    },
    published: {
      type: "string",
    },
    purl: {
      type: "string",
    },
    sbom_id: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const IdSchema = {
  type: "string",
  description: "A hash/digest prefixed with its type.",
  example:
    "sha256:dc60aeb735c16a71b6fc56e84ddb8193e3a6d1ef0b7e958d77e78fc039a5d04e",
} as const;

export const ImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ImporterData",
    },
    {
      type: "object",
      required: ["name"],
      properties: {
        name: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const ImporterConfigurationSchema = {
  oneOf: [
    {
      type: "object",
      required: ["sbom"],
      properties: {
        sbom: {
          $ref: "#/components/schemas/SbomImporter",
        },
      },
    },
    {
      type: "object",
      required: ["csaf"],
      properties: {
        csaf: {
          $ref: "#/components/schemas/CsafImporter",
        },
      },
    },
    {
      type: "object",
      required: ["osv"],
      properties: {
        osv: {
          $ref: "#/components/schemas/OsvImporter",
        },
      },
    },
    {
      type: "object",
      required: ["cve"],
      properties: {
        cve: {
          $ref: "#/components/schemas/CveImporter",
        },
      },
    },
    {
      type: "object",
      required: ["clearlyDefined"],
      properties: {
        clearlyDefined: {
          $ref: "#/components/schemas/ClearlyDefinedImporter",
        },
      },
    },
    {
      type: "object",
      required: ["clearlyDefinedCuration"],
      properties: {
        clearlyDefinedCuration: {
          $ref: "#/components/schemas/ClearlyDefinedCurationImporter",
        },
      },
    },
    {
      type: "object",
      required: ["cwe"],
      properties: {
        cwe: {
          $ref: "#/components/schemas/CweImporter",
        },
      },
    },
  ],
} as const;

export const ImporterDataSchema = {
  type: "object",
  required: ["configuration", "state", "lastChange"],
  properties: {
    configuration: {
      $ref: "#/components/schemas/ImporterConfiguration",
    },
    continuation: {
      description: "The continuation token of the importer.",
    },
    lastChange: {
      type: "string",
      format: "date-time",
      description: "The last state change",
    },
    lastError: {
      type: ["string", "null"],
      description: "The error of the last run (empty if successful)",
    },
    lastRun: {
      type: ["string", "null"],
      format: "date-time",
      description: "The last run (successful or not)",
    },
    lastSuccess: {
      type: ["string", "null"],
      format: "date-time",
      description: "The last successful run",
    },
    progress: {
      $ref: "#/components/schemas/Progress",
      description: "The current progress.",
    },
    state: {
      $ref: "#/components/schemas/State",
      description: "The current state of the importer",
    },
  },
} as const;

export const ImporterReportSchema = {
  type: "object",
  required: ["id", "importer", "creation"],
  properties: {
    creation: {
      type: "string",
      format: "date-time",
      description: "The time the report was created",
    },
    error: {
      type: ["string", "null"],
      description: "Errors captured by the report",
    },
    id: {
      type: "string",
      description: "The ID of the report",
    },
    importer: {
      type: "string",
      description: "The name of the importer this report belongs to",
    },
    report: {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/Report",
          description: "Detailed report information",
        },
      ],
    },
  },
} as const;

export const IngestResultSchema = {
  type: "object",
  description: "The result of the ingestion process",
  required: ["id", "document_id"],
  properties: {
    document_id: {
      type: "string",
      description: "The ID declared by the document",
    },
    id: {
      $ref: "#/components/schemas/Id",
      description: "The internal ID of the document",
    },
    warnings: {
      type: "array",
      items: {
        type: "string",
      },
      description: "Warnings that occurred during the import process",
    },
  },
} as const;

export const LabelsSchema = {
  type: "object",
  additionalProperties: {
    type: "string",
  },
} as const;

export const LicenseSummarySchema = {
  type: "object",
  required: [
    "id",
    "license",
    "spdx_licenses",
    "spdx_license_exceptions",
    "purls",
  ],
  properties: {
    id: {
      type: "string",
    },
    license: {
      type: "string",
    },
    purls: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
    spdx_license_exceptions: {
      type: "array",
      items: {
        type: "string",
      },
    },
    spdx_licenses: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const MessageSchema = {
  type: "object",
  required: ["severity", "message"],
  properties: {
    message: {
      type: "string",
      description: "The message",
    },
    severity: {
      $ref: "#/components/schemas/Severity",
      description: "The severity of the message",
    },
  },
} as const;

export const MessageTypeSchema = {
  type: "string",
  enum: ["human", "system", "ai", "tool"],
} as const;

export const OrganizationDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/OrganizationHead",
    },
    {
      type: "object",
      required: ["advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/AdvisoryHead",
          },
          description: "Advisories issued by the organization, if any.",
        },
      },
    },
  ],
} as const;

export const OrganizationHeadSchema = {
  type: "object",
  description: `An organization who may issue advisories, product SBOMs, or
otherwise be involved in supply-chain evidence.`,
  required: ["id", "name", "cpe_key", "website"],
  properties: {
    cpe_key: {
      type: ["string", "null"],
      description: "The `CPE` key of the organization, if known.",
    },
    id: {
      type: "string",
      format: "uuid",
      description: "The opaque UUID of the organization.",
    },
    name: {
      type: "string",
      description: "The name of the organization.",
    },
    website: {
      type: ["string", "null"],
      description: "The website of the organization, if known.",
    },
  },
} as const;

export const OrganizationSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/OrganizationHead",
    },
    {
      type: "object",
    },
  ],
} as const;

export const OsvImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      required: ["source"],
      properties: {
        branch: {
          type: ["string", "null"],
          description:
            "An optional branch. Will use the default branch otherwise.",
        },
        path: {
          type: ["string", "null"],
          description:
            "An optional path to start searching for documents. Will use the root of the repository otherwise.",
        },
        source: {
          type: "string",
          description: "The URL to the git repository of the OSV data",
        },
      },
    },
  ],
} as const;

export const PaginatedResults_AdvisorySummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        allOf: [
          {
            $ref: "#/components/schemas/AdvisoryHead",
          },
          {
            oneOf: [
              {
                type: "null",
              },
              {
                $ref: "#/components/schemas/SourceDocument",
                description:
                  "Information pertaning to the underlying source document, if any.",
              },
            ],
          },
          {
            type: "object",
            required: ["average_severity", "average_score", "vulnerabilities"],
            properties: {
              average_score: {
                type: ["number", "null"],
                format: "double",
                description:
                  "Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.",
              },
              average_severity: {
                type: ["string", "null"],
                description:
                  "Average (arithmetic mean) severity of the advisory aggregated from *all* related vulnerability assertions.",
              },
              vulnerabilities: {
                type: "array",
                items: {
                  $ref: "#/components/schemas/AdvisoryVulnerabilityHead",
                },
                description: "Vulnerabilities addressed within this advisory.",
              },
            },
          },
        ],
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_BasePurlSummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        allOf: [
          {
            $ref: "#/components/schemas/BasePurlHead",
          },
          {
            type: "object",
          },
        ],
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_ImporterReportSchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        type: "object",
        required: ["id", "importer", "creation"],
        properties: {
          creation: {
            type: "string",
            format: "date-time",
            description: "The time the report was created",
          },
          error: {
            type: ["string", "null"],
            description: "Errors captured by the report",
          },
          id: {
            type: "string",
            description: "The ID of the report",
          },
          importer: {
            type: "string",
            description: "The name of the importer this report belongs to",
          },
          report: {
            oneOf: [
              {
                type: "null",
              },
              {
                $ref: "#/components/schemas/Report",
                description: "Detailed report information",
              },
            ],
          },
        },
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_LicenseSummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        type: "object",
        required: [
          "id",
          "license",
          "spdx_licenses",
          "spdx_license_exceptions",
          "purls",
        ],
        properties: {
          id: {
            type: "string",
          },
          license: {
            type: "string",
          },
          purls: {
            type: "integer",
            format: "int64",
            minimum: 0,
          },
          spdx_license_exceptions: {
            type: "array",
            items: {
              type: "string",
            },
          },
          spdx_licenses: {
            type: "array",
            items: {
              type: "string",
            },
          },
        },
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_ProductSummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        allOf: [
          {
            $ref: "#/components/schemas/ProductHead",
          },
          {
            type: "object",
            required: ["versions", "vendor"],
            properties: {
              vendor: {
                oneOf: [
                  {
                    type: "null",
                  },
                  {
                    $ref: "#/components/schemas/OrganizationSummary",
                  },
                ],
              },
              versions: {
                type: "array",
                items: {
                  $ref: "#/components/schemas/ProductVersionHead",
                },
              },
            },
          },
        ],
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_PurlSummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        allOf: [
          {
            $ref: "#/components/schemas/PurlHead",
          },
          {
            type: "object",
            required: ["base", "version", "qualifiers"],
            properties: {
              base: {
                $ref: "#/components/schemas/BasePurlHead",
              },
              qualifiers: {
                type: "object",
                additionalProperties: {
                  type: "string",
                },
                propertyNames: {
                  type: "string",
                },
              },
              version: {
                $ref: "#/components/schemas/VersionedPurlHead",
              },
            },
          },
        ],
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_SbomPackageSchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        type: "object",
        required: ["id", "name", "purl", "cpe"],
        properties: {
          cpe: {
            type: "array",
            items: {
              type: "string",
            },
          },
          id: {
            type: "string",
          },
          name: {
            type: "string",
          },
          purl: {
            type: "array",
            items: {
              $ref: "#/components/schemas/PurlSummary",
            },
          },
          version: {
            type: ["string", "null"],
          },
        },
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_SbomPackageRelationSchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        type: "object",
        required: ["relationship", "package"],
        properties: {
          package: {
            $ref: "#/components/schemas/SbomPackage",
          },
          relationship: {
            $ref: "#/components/schemas/Relationship",
          },
        },
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_SbomSummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        allOf: [
          {
            $ref: "#/components/schemas/SbomHead",
          },
          {
            oneOf: [
              {
                type: "null",
              },
              {
                $ref: "#/components/schemas/SourceDocument",
              },
            ],
          },
          {
            type: "object",
            required: ["described_by"],
            properties: {
              described_by: {
                type: "array",
                items: {
                  $ref: "#/components/schemas/SbomPackage",
                },
              },
            },
          },
        ],
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_SpdxLicenseSummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        type: "object",
        required: ["id", "name"],
        properties: {
          id: {
            type: "string",
          },
          name: {
            type: "string",
          },
        },
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const PaginatedResults_VulnerabilitySummarySchema = {
  type: "object",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        allOf: [
          {
            $ref: "#/components/schemas/VulnerabilityHead",
          },
          {
            type: "object",
            required: ["average_severity", "average_score", "advisories"],
            properties: {
              advisories: {
                type: "array",
                items: {
                  $ref: "#/components/schemas/VulnerabilityAdvisoryHead",
                },
              },
              average_score: {
                type: ["number", "null"],
                format: "double",
                description:
                  "Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.",
              },
              average_severity: {
                oneOf: [
                  {
                    type: "null",
                  },
                  {
                    $ref: "#/components/schemas/Severity",
                    description:
                      "Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.",
                  },
                ],
              },
            },
          },
        ],
      },
    },
    total: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const ProductDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ProductHead",
    },
    {
      type: "object",
      required: ["versions", "vendor"],
      properties: {
        vendor: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/OrganizationSummary",
            },
          ],
        },
        versions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ProductVersionDetails",
          },
        },
      },
    },
  ],
} as const;

export const ProductHeadSchema = {
  type: "object",
  required: ["id", "name"],
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const ProductSbomHeadSchema = {
  type: "object",
  required: ["labels", "published"],
  properties: {
    labels: {
      $ref: "#/components/schemas/Labels",
    },
    published: {
      type: ["string", "null"],
      format: "date-time",
    },
  },
} as const;

export const ProductSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ProductHead",
    },
    {
      type: "object",
      required: ["versions", "vendor"],
      properties: {
        vendor: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/OrganizationSummary",
            },
          ],
        },
        versions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ProductVersionHead",
          },
        },
      },
    },
  ],
} as const;

export const ProductVersionDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/ProductVersionHead",
    },
    {
      type: "object",
      properties: {
        sbom: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/ProductSbomHead",
            },
          ],
        },
      },
    },
  ],
} as const;

export const ProductVersionHeadSchema = {
  type: "object",
  required: ["id", "version"],
  properties: {
    id: {
      type: "string",
    },
    sbom_id: {
      type: "string",
    },
    version: {
      type: "string",
    },
  },
} as const;

export const ProgressSchema = {
  allOf: [
    {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/ProgressDetails",
        },
      ],
    },
    {
      type: "object",
      properties: {
        message: {
          type: ["string", "null"],
        },
      },
    },
  ],
} as const;

export const ProgressDetailsSchema = {
  type: "object",
  required: [
    "current",
    "total",
    "percent",
    "rate",
    "estimatedSecondsRemaining",
    "estimatedCompletion",
  ],
  properties: {
    current: {
      type: "integer",
      format: "int32",
      description: "The current processed items.",
      minimum: 0,
    },
    estimatedCompletion: {
      type: "string",
      format: "date-time",
      description: "The estimated time of completion.",
    },
    estimatedSecondsRemaining: {
      type: "integer",
      format: "int64",
      description: "The estimated remaining time in seconds.",
      minimum: 0,
    },
    percent: {
      type: "number",
      format: "float",
      description: "Progress in percent (0..=1)",
    },
    rate: {
      type: "number",
      format: "float",
      description: "The average processing rate (per second).",
    },
    total: {
      type: "integer",
      format: "int32",
      description: "The total number of items to be processed.",
      minimum: 0,
    },
  },
} as const;

export const PurlSchema = {
  type: "string",
  format: "uri",
} as const;

export const PurlAdvisorySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlStatus",
          },
        },
      },
    },
  ],
} as const;

export const PurlDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PurlHead",
    },
    {
      type: "object",
      required: ["version", "base", "advisories", "licenses"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlAdvisory",
          },
        },
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        licenses: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlLicenseSummary",
          },
        },
        version: {
          $ref: "#/components/schemas/VersionedPurlHead",
        },
      },
    },
  ],
} as const;

export const PurlHeadSchema = {
  type: "object",
  required: ["uuid", "purl"],
  properties: {
    purl: {
      $ref: "#/components/schemas/Purl",
      description: "The actual qualified PURL",
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The ID of the qualified PURL",
    },
  },
} as const;

export const PurlLicenseSummarySchema = {
  type: "object",
  required: ["sbom", "licenses"],
  properties: {
    licenses: {
      type: "array",
      items: {
        type: "string",
      },
    },
    sbom: {
      $ref: "#/components/schemas/SbomHead",
    },
  },
} as const;

export const PurlStatusSchema = {
  type: "object",
  required: ["vulnerability", "status", "context"],
  properties: {
    context: {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/StatusContext",
        },
      ],
    },
    status: {
      type: "string",
    },
    vulnerability: {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
  },
} as const;

export const PurlSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/PurlHead",
    },
    {
      type: "object",
      required: ["base", "version", "qualifiers"],
      properties: {
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        qualifiers: {
          type: "object",
          additionalProperties: {
            type: "string",
          },
          propertyNames: {
            type: "string",
          },
        },
        version: {
          $ref: "#/components/schemas/VersionedPurlHead",
        },
      },
    },
  ],
} as const;

export const RelationshipSchema = {
  type: "string",
  enum: [
    "contained_by",
    "dependency_of",
    "dev_dependency_of",
    "optional_dependency_of",
    "provided_dependency_of",
    "test_dependency_of",
    "runtime_dependency_of",
    "example_of",
    "generated_from",
    "ancestor_of",
    "variant_of",
    "build_tool_of",
    "dev_tool_of",
    "described_by",
    "package_of",
    "undefined",
  ],
} as const;

export const ReportSchema = {
  type: "object",
  required: ["startDate", "endDate"],
  properties: {
    endDate: {
      type: "string",
      format: "date-time",
      description: "End of the import run",
    },
    messages: {
      type: "object",
      description: "Messages emitted during processing",
      additionalProperties: {
        type: "object",
        additionalProperties: {
          type: "array",
          items: {
            $ref: "#/components/schemas/Message",
          },
        },
        propertyNames: {
          type: "string",
        },
      },
      propertyNames: {
        type: "string",
        description: "The phase of processing",
        enum: ["retrieval", "validation", "upload"],
      },
    },
    numberOfItems: {
      type: "integer",
      description: "Number of processes items",
      minimum: 0,
    },
    startDate: {
      type: "string",
      format: "date-time",
      description: "Start of the import run",
    },
  },
} as const;

export const Revisioned_ImporterSchema = {
  type: "object",
  description: `A struct wrapping an item with a revision.

If the revision should not be part of the payload, but e.g. an HTTP header (like \`ETag\`), this
struct can help carrying both pieces.`,
  required: ["value", "revision"],
  properties: {
    revision: {
      type: "string",
      description: `The revision.

An opaque string that should have no meaning to the user, only to the backend.`,
    },
    value: {
      allOf: [
        {
          $ref: "#/components/schemas/ImporterData",
        },
        {
          type: "object",
          required: ["name"],
          properties: {
            name: {
              type: "string",
            },
          },
        },
      ],
    },
  },
} as const;

export const SbomAdvisorySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomStatus",
          },
        },
      },
    },
  ],
} as const;

export const SbomHeadSchema = {
  type: "object",
  required: [
    "id",
    "document_id",
    "labels",
    "data_licenses",
    "published",
    "authors",
    "name",
    "number_of_packages",
  ],
  properties: {
    authors: {
      type: "array",
      items: {
        type: "string",
      },
    },
    data_licenses: {
      type: "array",
      items: {
        type: "string",
      },
    },
    document_id: {
      type: "string",
    },
    id: {
      type: "string",
    },
    labels: {
      $ref: "#/components/schemas/Labels",
    },
    name: {
      type: "string",
    },
    number_of_packages: {
      type: "integer",
      format: "int64",
      description: "The number of packages this SBOM has",
      minimum: 0,
    },
    published: {
      type: ["string", "null"],
      format: "date-time",
    },
  },
} as const;

export const SbomImporterSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      required: ["source"],
      properties: {
        fetchRetries: {
          type: ["integer", "null"],
          minimum: 0,
        },
        ignoreMissing: {
          type: "boolean",
        },
        keys: {
          type: "array",
          items: {
            type: "string",
            format: "uri",
          },
        },
        onlyPatterns: {
          type: "array",
          items: {
            type: "string",
          },
        },
        sizeLimit: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/BinaryByteSize",
            },
          ],
        },
        source: {
          type: "string",
        },
        v3Signatures: {
          type: "boolean",
        },
      },
    },
  ],
} as const;

export const SbomPackageSchema = {
  type: "object",
  required: ["id", "name", "purl", "cpe"],
  properties: {
    cpe: {
      type: "array",
      items: {
        type: "string",
      },
    },
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    purl: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PurlSummary",
      },
    },
    version: {
      type: ["string", "null"],
    },
  },
} as const;

export const SbomPackageRelationSchema = {
  type: "object",
  required: ["relationship", "package"],
  properties: {
    package: {
      $ref: "#/components/schemas/SbomPackage",
    },
    relationship: {
      $ref: "#/components/schemas/Relationship",
    },
  },
} as const;

export const SbomStatusSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["average_severity", "status", "packages"],
      properties: {
        average_severity: {
          $ref: "#/components/schemas/Severity",
        },
        context: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/StatusContext",
            },
          ],
        },
        packages: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomPackage",
          },
        },
        status: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const SbomSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/SbomHead",
    },
    {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/SourceDocument",
        },
      ],
    },
    {
      type: "object",
      required: ["described_by"],
      properties: {
        described_by: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomPackage",
          },
        },
      },
    },
  ],
} as const;

export const SeveritySchema = {
  type: "string",
  description: `Qualitative Severity Rating Scale

Described in CVSS v3.1 Specification: Section 5:
<https://www.first.org/cvss/specification-document#t17>

> For some purposes it is useful to have a textual representation of the
> numeric Base, Temporal and Environmental scores.`,
  enum: ["none", "low", "medium", "high", "critical"],
} as const;

export const SourceDocumentSchema = {
  type: "object",
  required: ["sha256", "sha384", "sha512", "size"],
  properties: {
    sha256: {
      type: "string",
    },
    sha384: {
      type: "string",
    },
    sha512: {
      type: "string",
    },
    size: {
      type: "integer",
      format: "int64",
      minimum: 0,
    },
  },
} as const;

export const SpdxLicenseDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/SpdxLicenseSummary",
    },
    {
      type: "object",
      required: ["text"],
      properties: {
        text: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const SpdxLicenseSummarySchema = {
  type: "object",
  required: ["id", "name"],
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const StateSchema = {
  type: "string",
  enum: ["waiting", "running"],
} as const;

export const StatusContextSchema = {
  oneOf: [
    {
      type: "object",
      required: ["purl"],
      properties: {
        purl: {
          $ref: "#/components/schemas/Purl",
        },
      },
    },
    {
      type: "object",
      required: ["cpe"],
      properties: {
        cpe: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const TypeCountsSchema = {
  type: "object",
  required: ["base", "version", "package"],
  properties: {
    base: {
      type: "integer",
      format: "int64",
    },
    package: {
      type: "integer",
      format: "int64",
    },
    version: {
      type: "integer",
      format: "int64",
    },
  },
} as const;

export const TypeHeadSchema = {
  type: "object",
  required: ["name"],
  properties: {
    name: {
      type: "string",
    },
  },
} as const;

export const TypeSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/TypeHead",
    },
    {
      type: "object",
      required: ["counts"],
      properties: {
        counts: {
          $ref: "#/components/schemas/TypeCounts",
        },
      },
    },
  ],
} as const;

export const VersionedPurlAdvisorySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VersionedPurlStatus",
          },
        },
      },
    },
  ],
} as const;

export const VersionedPurlDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VersionedPurlHead",
    },
    {
      type: "object",
      required: ["base", "purls", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VersionedPurlAdvisory",
          },
        },
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        purls: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlHead",
          },
        },
      },
    },
  ],
} as const;

export const VersionedPurlHeadSchema = {
  type: "object",
  required: ["uuid", "purl", "version"],
  properties: {
    purl: {
      $ref: "#/components/schemas/Purl",
      description: "The actual, versioned PURL",
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The ID of the versioned PURL",
    },
    version: {
      type: "string",
      description: "The version from the PURL",
    },
  },
} as const;

export const VersionedPurlStatusSchema = {
  type: "object",
  required: ["vulnerability", "status"],
  properties: {
    status: {
      type: "string",
    },
    vulnerability: {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
  },
} as const;

export const VersionedPurlSummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VersionedPurlHead",
    },
    {
      type: "object",
      required: ["base", "purls"],
      properties: {
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        purls: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlHead",
          },
        },
      },
    },
  ],
} as const;

export const VulnerabilityAdvisoryHeadSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["severity", "score"],
      properties: {
        score: {
          type: ["number", "null"],
          format: "double",
        },
        severity: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/Severity",
            },
          ],
        },
      },
    },
  ],
} as const;

export const VulnerabilityAdvisoryStatusSchema = {
  type: "object",
  required: ["base_purl", "version", "context"],
  properties: {
    base_purl: {
      $ref: "#/components/schemas/BasePurlHead",
    },
    context: {
      oneOf: [
        {
          type: "null",
        },
        {
          $ref: "#/components/schemas/StatusContext",
        },
      ],
    },
    version: {
      type: "string",
    },
  },
} as const;

export const VulnerabilityAdvisorySummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityAdvisoryHead",
    },
    {
      type: "object",
      required: ["cvss3_scores", "purls", "sboms", "number_of_vulnerabilities"],
      properties: {
        cvss3_scores: {
          type: "array",
          items: {
            type: "string",
          },
          description:
            "CVSS3 scores from this advisory regarding the vulnerability.",
        },
        number_of_vulnerabilities: {
          type: "integer",
          format: "int64",
          description:
            "The total number of vulnerabilities described by this advisory",
          minimum: 0,
        },
        purls: {
          type: "object",
          additionalProperties: {
            type: "array",
            items: {
              $ref: "#/components/schemas/VulnerabilityAdvisoryStatus",
            },
          },
          propertyNames: {
            type: "string",
          },
        },
        sboms: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VulnerabilitySbomStatus",
          },
          description:
            "SBOMs claimed by this advisory to be addressed by this vulnerability.",
        },
      },
    },
  ],
} as const;

export const VulnerabilityDetailsSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["average_severity", "average_score", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VulnerabilityAdvisorySummary",
          },
          description: "Advisories addressing this vulnerability, if any.",
        },
        average_score: {
          type: ["number", "null"],
          format: "double",
          description:
            "Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.",
        },
        average_severity: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/Severity",
              description:
                "Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.",
            },
          ],
        },
      },
    },
  ],
} as const;

export const VulnerabilityHeadSchema = {
  type: "object",
  required: [
    "normative",
    "identifier",
    "title",
    "description",
    "reserved",
    "published",
    "modified",
    "withdrawn",
    "discovered",
    "released",
    "cwes",
  ],
  properties: {
    cwes: {
      type: "array",
      items: {
        type: "string",
      },
      description: "Associated CWE, if any.",
    },
    description: {
      type: ["string", "null"],
      description: "The description of the vulnerability, if known.",
    },
    discovered: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was discovered, if any.",
    },
    identifier: {
      type: "string",
      description: `The globally-unique identifier for the vulnerability.
Traditionally (but not required) refers to the assigned
CVE identifier.`,
    },
    modified: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was last modified, if any.",
    },
    normative: {
      type: "boolean",
    },
    published: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was published, if any.",
    },
    released: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when software containing the vulnerability first released, if known.",
    },
    reserved: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability identifier was reserved, if any.",
    },
    title: {
      type: ["string", "null"],
      description: "The title of the vulnerability, if known.",
    },
    withdrawn: {
      type: ["string", "null"],
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was last withdrawn, if any.",
    },
  },
} as const;

export const VulnerabilitySbomStatusSchema = {
  allOf: [
    {
      $ref: "#/components/schemas/SbomHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            type: "string",
          },
          uniqueItems: true,
        },
        version: {
          type: ["string", "null"],
        },
      },
    },
  ],
} as const;

export const VulnerabilitySummarySchema = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["average_severity", "average_score", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VulnerabilityAdvisoryHead",
          },
        },
        average_score: {
          type: ["number", "null"],
          format: "double",
          description:
            "Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.",
        },
        average_severity: {
          oneOf: [
            {
              type: "null",
            },
            {
              $ref: "#/components/schemas/Severity",
              description:
                "Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.",
            },
          ],
        },
      },
    },
  ],
} as const;
