// This file is auto-generated by @hey-api/openapi-ts

export const $AdvisoryDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["vulnerabilities", "average_severity", "average_score"],
      properties: {
        average_score: {
          type: "number",
          format: "double",
          description:
            "Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.",
          nullable: true,
        },
        average_severity: {
          allOf: [
            {
              $ref: "#/components/schemas/Severity",
            },
          ],
          nullable: true,
        },
        vulnerabilities: {
          type: "array",
          items: {
            $ref: "#/components/schemas/AdvisoryVulnerabilitySummary",
          },
          description: "Vulnerabilities addressed within this advisory.",
        },
      },
    },
  ],
} as const;

export const $AdvisoryHead = {
  type: "object",
  required: [
    "uuid",
    "identifier",
    "hashes",
    "issuer",
    "published",
    "withdrawn",
    "title",
    "labels",
  ],
  properties: {
    hashes: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Id",
      },
      description: "Hashes of the underlying original document as ingested.",
    },
    identifier: {
      type: "string",
      description:
        "The identifier of the advisory, as assigned by the issuing organization.",
    },
    issuer: {
      allOf: [
        {
          $ref: "#/components/schemas/OrganizationSummary",
        },
      ],
      nullable: true,
    },
    labels: {
      $ref: "#/components/schemas/Labels",
    },
    modified: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the advisory was last modified, if any.",
      nullable: true,
    },
    published: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the advisory was published, if any.",
      nullable: true,
    },
    title: {
      type: "string",
      description:
        "The title of the advisory as assigned by the issuing organization.",
      nullable: true,
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The opaque UUID of the advisory.",
    },
    withdrawn: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the advisory was withdrawn, if any.",
      nullable: true,
    },
  },
} as const;

export const $AdvisorySummary = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["average_severity", "average_score", "vulnerabilities"],
      properties: {
        average_score: {
          type: "number",
          format: "double",
          description:
            "Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.",
          nullable: true,
        },
        average_severity: {
          type: "string",
          description:
            "Average (arithmetic mean) severity of the advisory aggregated from *all* related vulnerability assertions.",
          nullable: true,
        },
        vulnerabilities: {
          type: "array",
          items: {
            $ref: "#/components/schemas/AdvisoryVulnerabilityHead",
          },
          description: "Vulnerabilities addressed within this advisory.",
        },
      },
    },
  ],
} as const;

export const $AdvisoryVulnerabilityAssertions = {
  type: "object",
  required: ["assertions"],
  properties: {
    assertions: {
      type: "object",
      additionalProperties: {
        type: "array",
        items: {
          $ref: "#/components/schemas/Assertion",
        },
      },
    },
  },
} as const;

export const $AdvisoryVulnerabilityHead = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["severity", "score"],
      properties: {
        score: {
          type: "number",
          format: "double",
          description: `The average (arithmetic mean) score this advisory assigns to
the particular vulnerability.`,
        },
        severity: {
          $ref: "#/components/schemas/Severity",
        },
      },
    },
  ],
} as const;

export const $AdvisoryVulnerabilitySummary = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryVulnerabilityHead",
    },
    {
      type: "object",
      required: ["cvss3_scores"],
      properties: {
        cvss3_scores: {
          type: "array",
          items: {
            type: "string",
          },
          description: `All CVSS3 scores from the advisory for the given vulnerability.
May include several, varying by minor version of the CVSS3 vector.`,
        },
      },
    },
  ],
  description:
    "Summary of information from this advisory regarding a single specific vulnerability.",
} as const;

export const $Assertion = {
  oneOf: [
    {
      type: "object",
      required: ["affected"],
      properties: {
        affected: {
          type: "object",
          required: ["start_version", "end_version"],
          properties: {
            end_version: {
              type: "string",
            },
            start_version: {
              type: "string",
            },
          },
        },
      },
    },
    {
      type: "object",
      required: ["not_affected"],
      properties: {
        not_affected: {
          type: "object",
          required: ["version"],
          properties: {
            version: {
              type: "string",
            },
          },
        },
      },
    },
    {
      type: "object",
      required: ["fixed"],
      properties: {
        fixed: {
          type: "object",
          required: ["version"],
          properties: {
            version: {
              type: "string",
            },
          },
        },
      },
    },
  ],
} as const;

export const $BasePurlDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/BasePurlHead",
    },
    {
      type: "object",
      required: ["versions"],
      properties: {
        versions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VersionedPurlSummary",
          },
        },
      },
    },
  ],
} as const;

export const $BasePurlHead = {
  type: "object",
  required: ["uuid", "purl"],
  properties: {
    purl: {
      $ref: "#/components/schemas/Purl",
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The ID of the base PURL",
    },
  },
} as const;

export const $BasePurlSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/BasePurlHead",
    },
    {
      type: "object",
    },
  ],
} as const;

export const $BinaryByteSize = {
  type: "string",
} as const;

export const $CommonImporter = {
  type: "object",
  required: ["period"],
  properties: {
    description: {
      type: "string",
      description: "A description for users.",
      nullable: true,
    },
    disabled: {
      type: "boolean",
      description: "A flag to disable the importer, without deleting it.",
    },
    labels: {
      $ref: "#/components/schemas/Labels",
    },
    period: {
      type: "string",
      description: "The period the importer should be run.",
    },
  },
} as const;

export const $CsafImporter = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      required: ["source"],
      properties: {
        fetchRetries: {
          type: "integer",
          nullable: true,
          minimum: 0,
        },
        onlyPatterns: {
          type: "array",
          items: {
            type: "string",
          },
        },
        source: {
          type: "string",
        },
        v3Signatures: {
          type: "boolean",
        },
      },
    },
  ],
} as const;

export const $CveImporter = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      properties: {
        source: {
          type: "string",
        },
        startYear: {
          type: "integer",
          format: "int32",
          nullable: true,
          minimum: 0,
        },
        years: {
          type: "array",
          items: {
            type: "integer",
            format: "int32",
            minimum: 0,
          },
          uniqueItems: true,
        },
      },
    },
  ],
} as const;

export const $Id = {
  type: "string",
  description: "A hash/digest prefixed with its type.",
  example:
    "sha256:dc60aeb735c16a71b6fc56e84ddb8193e3a6d1ef0b7e958d77e78fc039a5d04e",
} as const;

export const $Importer = {
  allOf: [
    {
      $ref: "#/components/schemas/ImporterData",
    },
    {
      type: "object",
      required: ["name"],
      properties: {
        name: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const $ImporterConfiguration = {
  oneOf: [
    {
      type: "object",
      required: ["sbom"],
      properties: {
        sbom: {
          $ref: "#/components/schemas/SbomImporter",
        },
      },
    },
    {
      type: "object",
      required: ["csaf"],
      properties: {
        csaf: {
          $ref: "#/components/schemas/CsafImporter",
        },
      },
    },
    {
      type: "object",
      required: ["osv"],
      properties: {
        osv: {
          $ref: "#/components/schemas/OsvImporter",
        },
      },
    },
    {
      type: "object",
      required: ["cve"],
      properties: {
        cve: {
          $ref: "#/components/schemas/CveImporter",
        },
      },
    },
  ],
} as const;

export const $ImporterData = {
  type: "object",
  required: ["configuration", "state", "lastChange"],
  properties: {
    configuration: {
      $ref: "#/components/schemas/ImporterConfiguration",
    },
    continuation: {
      description: "The continuation token of the importer.",
    },
    lastChange: {
      type: "string",
      format: "date-time",
      description: "The last state change",
    },
    lastError: {
      type: "string",
      description: "The error of the last run (empty if successful)",
      nullable: true,
    },
    lastRun: {
      type: "string",
      format: "date-time",
      description: "The last run (successful or not)",
      nullable: true,
    },
    lastSuccess: {
      type: "string",
      format: "date-time",
      description: "The last successful run",
      nullable: true,
    },
    state: {
      $ref: "#/components/schemas/State",
    },
  },
} as const;

export const $ImporterReport = {
  type: "object",
  required: ["id", "importer", "creation", "report"],
  properties: {
    creation: {
      type: "string",
      format: "date-time",
    },
    error: {
      type: "string",
      nullable: true,
    },
    id: {
      type: "string",
    },
    importer: {
      type: "string",
    },
    report: {},
  },
} as const;

export const $Labels = {
  type: "object",
  additionalProperties: {
    type: "string",
  },
} as const;

export const $OrganizationDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/OrganizationHead",
    },
    {
      type: "object",
      required: ["advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/AdvisoryHead",
          },
          description: "Advisories issued by the organization, if any.",
        },
      },
    },
  ],
} as const;

export const $OrganizationHead = {
  type: "object",
  description: `An organization who may issue advisories, product SBOMs, or
otherwise be involved in supply-chain evidence.`,
  required: ["id", "name", "cpe_key", "website"],
  properties: {
    cpe_key: {
      type: "string",
      description: "The `CPE` key of the organization, if known.",
      nullable: true,
    },
    id: {
      type: "string",
      format: "uuid",
      description: "The opaque UUID of the organization.",
    },
    name: {
      type: "string",
      description: "The name of the organization.",
    },
    website: {
      type: "string",
      description: "The website of the organization, if known.",
      nullable: true,
    },
  },
} as const;

export const $OrganizationSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/OrganizationHead",
    },
    {
      type: "object",
    },
  ],
} as const;

export const $OsvImporter = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      required: ["source"],
      properties: {
        branch: {
          type: "string",
          description:
            "An optional branch. Will use the default branch otherwise.",
          nullable: true,
        },
        path: {
          type: "string",
          description:
            "An optional path to start searching for documents. Will use the root of the repository otherwise.",
          nullable: true,
        },
        source: {
          type: "string",
          description: "The URL to the git repository of the OSV data",
        },
      },
    },
  ],
} as const;

export const $PaginatedAdvisorySummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AdvisorySummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedBasePurlSummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/BasePurlSummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedImporterReport = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ImporterReport",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedOrganizationSummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/OrganizationSummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedProductSummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ProductSummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedPurlSummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PurlSummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedSbomPackage = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SbomPackage",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedSbomPackageRelation = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SbomPackageRelation",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedSbomSummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SbomSummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $PaginatedVulnerabilitySummary = {
  type: "object",
  description: "Paginated returned items",
  required: ["items", "total"],
  properties: {
    items: {
      type: "array",
      items: {
        $ref: "#/components/schemas/VulnerabilitySummary",
      },
      description: "Returned items",
    },
    total: {
      type: "integer",
      format: "int64",
      description: "Total number of items found",
      minimum: 0,
    },
  },
} as const;

export const $ProductDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/ProductHead",
    },
    {
      type: "object",
      required: ["versions", "vendor"],
      properties: {
        vendor: {
          allOf: [
            {
              $ref: "#/components/schemas/OrganizationSummary",
            },
          ],
          nullable: true,
        },
        versions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ProductVersionDetails",
          },
        },
      },
    },
  ],
} as const;

export const $ProductHead = {
  type: "object",
  required: ["id", "name"],
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const $ProductSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/ProductHead",
    },
    {
      type: "object",
      required: ["versions", "vendor"],
      properties: {
        vendor: {
          allOf: [
            {
              $ref: "#/components/schemas/OrganizationSummary",
            },
          ],
          nullable: true,
        },
        versions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ProductVersionHead",
          },
        },
      },
    },
  ],
} as const;

export const $ProductVersionDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/ProductVersionHead",
    },
    {
      type: "object",
      properties: {
        sbom: {
          allOf: [
            {
              $ref: "#/components/schemas/SbomHead",
            },
          ],
          nullable: true,
        },
      },
    },
  ],
} as const;

export const $ProductVersionHead = {
  type: "object",
  required: ["id", "version"],
  properties: {
    id: {
      type: "string",
      format: "uuid",
    },
    sbom_id: {
      type: "string",
      format: "uuid",
      nullable: true,
    },
    version: {
      type: "string",
    },
  },
} as const;

export const $Purl = {
  type: "string",
  format: "uri",
} as const;

export const $PurlAdvisory = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlStatus",
          },
        },
      },
    },
  ],
} as const;

export const $PurlDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/PurlHead",
    },
    {
      type: "object",
      required: ["version", "base", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlAdvisory",
          },
        },
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        version: {
          $ref: "#/components/schemas/VersionedPurlHead",
        },
      },
    },
  ],
} as const;

export const $PurlHead = {
  type: "object",
  required: ["uuid", "purl"],
  properties: {
    purl: {
      $ref: "#/components/schemas/Purl",
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The ID of the qualified PURL",
    },
  },
} as const;

export const $PurlStatus = {
  type: "object",
  required: ["vulnerability", "status", "context"],
  properties: {
    context: {
      allOf: [
        {
          $ref: "#/components/schemas/StatusContext",
        },
      ],
      nullable: true,
    },
    status: {
      type: "string",
    },
    vulnerability: {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
  },
} as const;

export const $PurlSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/PurlHead",
    },
    {
      type: "object",
      required: ["base", "version", "qualifiers"],
      properties: {
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        qualifiers: {
          type: "object",
          additionalProperties: {
            type: "string",
          },
        },
        version: {
          $ref: "#/components/schemas/VersionedPurlHead",
        },
      },
    },
  ],
} as const;

export const $Relationship = {
  type: "string",
  enum: [
    "contained_by",
    "dependency_of",
    "dev_dependency_of",
    "optional_dependency_of",
    "provided_dependency_of",
    "test_dependency_of",
    "runtime_dependency_of",
    "example_of",
    "generated_from",
    "ancestor_of",
    "variant_of",
    "build_tool_of",
    "dev_tool_of",
    "described_by",
  ],
} as const;

export const $RevisionedImporter = {
  type: "object",
  description: `A struct wrapping an item with a revision.

If the revision should not be part of the payload, but e.g. an HTTP header (like \`ETag\`), this
struct can help carrying both pieces.`,
  required: ["value", "revision"],
  properties: {
    revision: {
      type: "string",
      description: `The revision.

An opaque string that should have no meaning to the user, only to the backend.`,
    },
    value: {
      $ref: "#/components/schemas/Importer",
    },
  },
} as const;

export const $SbomAdvisory = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomStatus",
          },
        },
      },
    },
  ],
} as const;

export const $SbomDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/SbomSummary",
    },
    {
      type: "object",
      required: ["advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomAdvisory",
          },
        },
      },
    },
  ],
} as const;

export const $SbomHead = {
  type: "object",
  required: [
    "id",
    "hashes",
    "document_id",
    "labels",
    "published",
    "authors",
    "name",
  ],
  properties: {
    authors: {
      type: "array",
      items: {
        type: "string",
      },
    },
    document_id: {
      type: "string",
    },
    hashes: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Id",
      },
    },
    id: {
      type: "string",
      format: "uuid",
    },
    labels: {
      $ref: "#/components/schemas/Labels",
    },
    name: {
      type: "string",
    },
    published: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $SbomImporter = {
  allOf: [
    {
      $ref: "#/components/schemas/CommonImporter",
    },
    {
      type: "object",
      required: ["source"],
      properties: {
        fetchRetries: {
          type: "integer",
          nullable: true,
          minimum: 0,
        },
        keys: {
          type: "array",
          items: {
            type: "string",
            format: "uri",
          },
        },
        onlyPatterns: {
          type: "array",
          items: {
            type: "string",
          },
        },
        sizeLimit: {
          allOf: [
            {
              $ref: "#/components/schemas/BinaryByteSize",
            },
          ],
          nullable: true,
        },
        source: {
          type: "string",
        },
        v3Signatures: {
          type: "boolean",
        },
      },
    },
  ],
} as const;

export const $SbomPackage = {
  type: "object",
  required: ["id", "name", "purl", "cpe"],
  properties: {
    cpe: {
      type: "array",
      items: {
        type: "string",
      },
    },
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    purl: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PurlSummary",
      },
    },
    version: {
      type: "string",
      nullable: true,
    },
  },
} as const;

export const $SbomPackageRelation = {
  type: "object",
  required: ["relationship", "package"],
  properties: {
    package: {
      $ref: "#/components/schemas/SbomPackage",
    },
    relationship: {
      $ref: "#/components/schemas/Relationship",
    },
  },
} as const;

export const $SbomStatus = {
  type: "object",
  required: ["vulnerability_id", "status", "packages"],
  properties: {
    context: {
      allOf: [
        {
          $ref: "#/components/schemas/StatusContext",
        },
      ],
      nullable: true,
    },
    packages: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SbomPackage",
      },
    },
    status: {
      type: "string",
    },
    vulnerability_id: {
      type: "string",
    },
  },
} as const;

export const $SbomSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/SbomHead",
    },
    {
      type: "object",
      required: ["described_by"],
      properties: {
        described_by: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomPackage",
          },
        },
      },
    },
  ],
} as const;

export const $Severity = {
  type: "string",
  description: `Qualitative Severity Rating Scale

Described in CVSS v3.1 Specification: Section 5:
<https://www.first.org/cvss/specification-document#t17>

> For some purposes it is useful to have a textual representation of the
> numeric Base, Temporal and Environmental scores.`,
  enum: ["none", "low", "medium", "high", "critical"],
} as const;

export const $State = {
  type: "string",
  enum: ["waiting", "running"],
} as const;

export const $StatusContext = {
  oneOf: [
    {
      type: "object",
      required: ["purl"],
      properties: {
        purl: {
          $ref: "#/components/schemas/Purl",
        },
      },
    },
    {
      type: "object",
      required: ["cpe"],
      properties: {
        cpe: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const $TypeCounts = {
  type: "object",
  required: ["base", "version", "package"],
  properties: {
    base: {
      type: "integer",
      format: "int64",
    },
    package: {
      type: "integer",
      format: "int64",
    },
    version: {
      type: "integer",
      format: "int64",
    },
  },
} as const;

export const $TypeHead = {
  type: "object",
  required: ["name"],
  properties: {
    name: {
      type: "string",
    },
  },
} as const;

export const $TypeSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/TypeHead",
    },
    {
      type: "object",
      required: ["counts"],
      properties: {
        counts: {
          $ref: "#/components/schemas/TypeCounts",
        },
      },
    },
  ],
} as const;

export const $Uuid = {
  type: "string",
  description: "a UUID",
} as const;

export const $VersionedPurlAdvisory = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["status"],
      properties: {
        status: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VersionedPurlStatus",
          },
        },
      },
    },
  ],
} as const;

export const $VersionedPurlDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/VersionedPurlHead",
    },
    {
      type: "object",
      required: ["base", "purls", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VersionedPurlAdvisory",
          },
        },
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        purls: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlHead",
          },
        },
      },
    },
  ],
} as const;

export const $VersionedPurlHead = {
  type: "object",
  required: ["uuid", "purl", "version"],
  properties: {
    purl: {
      $ref: "#/components/schemas/Purl",
    },
    uuid: {
      type: "string",
      format: "uuid",
      description: "The ID of the versioned PURL",
    },
    version: {
      type: "string",
      description: "The version from the PURL",
    },
  },
} as const;

export const $VersionedPurlStatus = {
  type: "object",
  required: ["vulnerability", "status"],
  properties: {
    status: {
      type: "string",
    },
    vulnerability: {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
  },
} as const;

export const $VersionedPurlSummary = {
  allOf: [
    {
      $ref: "#/components/schemas/VersionedPurlHead",
    },
    {
      type: "object",
      required: ["base", "purls"],
      properties: {
        base: {
          $ref: "#/components/schemas/BasePurlHead",
        },
        purls: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PurlHead",
          },
        },
      },
    },
  ],
} as const;

export const $VulnerabilityAdvisoryHead = {
  allOf: [
    {
      $ref: "#/components/schemas/AdvisoryHead",
    },
    {
      type: "object",
      required: ["severity", "score"],
      properties: {
        score: {
          type: "number",
          format: "double",
          nullable: true,
        },
        severity: {
          allOf: [
            {
              $ref: "#/components/schemas/Severity",
            },
          ],
          nullable: true,
        },
      },
    },
  ],
} as const;

export const $VulnerabilityAdvisoryStatus = {
  type: "object",
  required: ["base_purl", "version", "context"],
  properties: {
    base_purl: {
      $ref: "#/components/schemas/BasePurlHead",
    },
    context: {
      allOf: [
        {
          $ref: "#/components/schemas/StatusContext",
        },
      ],
      nullable: true,
    },
    version: {
      type: "string",
    },
  },
} as const;

export const $VulnerabilityAdvisorySummary = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityAdvisoryHead",
    },
    {
      type: "object",
      required: ["cvss3_scores", "purls", "sboms"],
      properties: {
        cvss3_scores: {
          type: "array",
          items: {
            type: "string",
          },
          description:
            "CVSS3 scores from this advisory regarding the vulnerability.",
        },
        purls: {
          type: "object",
          additionalProperties: {
            type: "array",
            items: {
              $ref: "#/components/schemas/VulnerabilityAdvisoryStatus",
            },
          },
        },
        sboms: {
          type: "array",
          items: {
            $ref: "#/components/schemas/SbomStatus",
          },
          description:
            "SBOMs claimed by this advisory to be addressed by this vulnerability.",
        },
      },
    },
  ],
} as const;

export const $VulnerabilityDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["average_severity", "average_score", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VulnerabilityAdvisorySummary",
          },
          description: "Advisories addressing this vulnerability, if any.",
        },
        average_score: {
          type: "number",
          format: "double",
          description:
            "Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.",
          nullable: true,
        },
        average_severity: {
          allOf: [
            {
              $ref: "#/components/schemas/Severity",
            },
          ],
          nullable: true,
        },
      },
    },
  ],
} as const;

export const $VulnerabilityHead = {
  type: "object",
  required: [
    "normative",
    "identifier",
    "title",
    "description",
    "published",
    "modified",
    "withdrawn",
    "discovered",
    "released",
    "cwe",
  ],
  properties: {
    cwe: {
      type: "string",
      description: "Associated CWE, if any.",
      nullable: true,
    },
    description: {
      type: "string",
      description: "The description of the vulnerability, if known.",
      nullable: true,
    },
    discovered: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was discovered, if any.",
      nullable: true,
    },
    identifier: {
      type: "string",
      description: `The globally-unique identifier for the vulnerability.
Traditionally (but not required) refers to the assigned
CVE identifier.`,
    },
    modified: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was last modified, if any.",
      nullable: true,
    },
    normative: {
      type: "boolean",
    },
    published: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was published, if any.",
      nullable: true,
    },
    released: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when software containing the vulnerability first released, if known.",
      nullable: true,
    },
    title: {
      type: "string",
      description: "The title of the vulnerability, if known.",
      nullable: true,
    },
    withdrawn: {
      type: "string",
      format: "date-time",
      description:
        "The date (in RFC3339 format) of when the vulnerability was last withdrawn, if any.",
      nullable: true,
    },
  },
} as const;

export const $VulnerabilitySummary = {
  allOf: [
    {
      $ref: "#/components/schemas/VulnerabilityHead",
    },
    {
      type: "object",
      required: ["average_severity", "average_score", "advisories"],
      properties: {
        advisories: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VulnerabilityAdvisoryHead",
          },
        },
        average_score: {
          type: "number",
          format: "double",
          description:
            "Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.",
          nullable: true,
        },
        average_severity: {
          allOf: [
            {
              $ref: "#/components/schemas/Severity",
            },
          ],
          nullable: true,
        },
      },
    },
  ],
} as const;

export const $Which = {
  type: "string",
  enum: ["left", "right"],
} as const;
