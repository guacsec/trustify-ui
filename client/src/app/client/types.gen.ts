// This file is auto-generated by @hey-api/openapi-ts

export type AdvisoryDetails = AdvisoryHead &
  (SourceDocument | null) & {
    /**
     * Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.
     */
    average_score: number | null;
    average_severity: Severity | null;
    /**
     * Vulnerabilities addressed within this advisory.
     */
    vulnerabilities: Array<AdvisoryVulnerabilitySummary>;
  };

export type AdvisoryHead = {
  /**
   * The identifier of the advisory, as assigned by the issuing organization.
   */
  identifier: string;
  issuer: OrganizationSummary | null;
  labels: Labels;
  /**
   * The date (in RFC3339 format) of when the advisory was last modified, if any.
   */
  modified?: string | null;
  /**
   * The date (in RFC3339 format) of when the advisory was published, if any.
   */
  published: string | null;
  /**
   * The title of the advisory as assigned by the issuing organization.
   */
  title: string | null;
  /**
   * The opaque UUID of the advisory.
   */
  uuid: string;
  /**
   * The date (in RFC3339 format) of when the advisory was withdrawn, if any.
   */
  withdrawn: string | null;
};

export type AdvisorySummary = AdvisoryHead &
  (SourceDocument | null) & {
    /**
     * Average (arithmetic mean) score of the advisory aggregated from *all* related vulnerability assertions.
     */
    average_score: number | null;
    /**
     * Average (arithmetic mean) severity of the advisory aggregated from *all* related vulnerability assertions.
     */
    average_severity: string | null;
    /**
     * Vulnerabilities addressed within this advisory.
     */
    vulnerabilities: Array<AdvisoryVulnerabilityHead>;
  };

export type AdvisoryVulnerabilityAssertions = {
  assertions: {
    [key: string]: Array<Assertion>;
  };
};

export type AdvisoryVulnerabilityHead = VulnerabilityHead & {
  /**
   * The average (arithmetic mean) score this advisory assigns to
   * the particular vulnerability.
   */
  score: number;
  severity: Severity;
};

/**
 * Summary of information from this advisory regarding a single specific vulnerability.
 */
export type AdvisoryVulnerabilitySummary = AdvisoryVulnerabilityHead & {
  /**
   * All CVSS3 scores from the advisory for the given vulnerability.
   * May include several, varying by minor version of the CVSS3 vector.
   */
  cvss3_scores: Array<string>;
};

export type AnalysisStatus = {
  graph_count: number;
  sbom_count: number;
};

export type AncNode = {
  name: string;
  node_id: string;
  purl: string;
  sbom_id: string;
};

export type AncestorSummary = {
  ancestors: Array<AncNode>;
  document_id: string;
  name: string;
  node_id: string;
  product_name: string;
  product_version: string;
  published: string;
  purl: string;
  sbom_id: string;
};

export type Assertion =
  | {
      affected: {
        end_version: string;
        start_version: string;
      };
    }
  | {
      not_affected: {
        version: string;
      };
    }
  | {
      fixed: {
        version: string;
      };
    };

export type BasePurlDetails = BasePurlHead & {
  versions: Array<VersionedPurlSummary>;
};

export type BasePurlHead = {
  purl: Purl;
  /**
   * The ID of the base PURL
   */
  uuid: string;
};

export type BasePurlSummary = BasePurlHead & {
  [key: string]: unknown;
};

export type BinaryByteSize = string;

export type ChatMessage = {
  content: string;
  internal_state?: string | null;
  message_type: MessageType;
};

export type ChatState = {
  messages: Array<ChatMessage>;
};

export type ClearlyDefinedImporter = CommonImporter & {
  source?: string;
  types?: Array<ClearlyDefinedPackageType>;
};

export type ClearlyDefinedPackageType =
  | "composer"
  | "crate"
  | "deb"
  | "gem"
  | "git"
  | "go"
  | "maven"
  | "npm"
  | "nuget"
  | "pod"
  | "pypi";

export type CommonImporter = {
  /**
   * A description for users.
   */
  description?: string | null;
  /**
   * A flag to disable the importer, without deleting it.
   */
  disabled?: boolean;
  labels?: Labels;
  /**
   * The period the importer should be run.
   */
  period: string;
};

export type CsafImporter = CommonImporter & {
  fetchRetries?: number | null;
  onlyPatterns?: Array<string>;
  source: string;
  v3Signatures?: boolean;
};

export type CveImporter = CommonImporter & {
  source?: string;
  startYear?: number | null;
  years?: Array<number>;
};

export type CweImporter = CommonImporter & {
  source?: string;
};

export type DatasetIngestResult = {
  files: {
    [key: string]: IngestResult;
  };
  warnings: Array<string>;
};

export type DepNode = {
  deps: Array<DepNode>;
  name: string;
  node_id: string;
  purl: string;
  sbom_id: string;
};

export type DepSummary = {
  deps: Array<DepNode>;
  document_id: string;
  name: string;
  node_id: string;
  product_name: string;
  product_version: string;
  published: string;
  purl: string;
  sbom_id: string;
};

/**
 * A hash/digest prefixed with its type.
 */
export type Id = string;

export type Importer = ImporterData & {
  name: string;
};

export type ImporterConfiguration =
  | {
      sbom: SbomImporter;
    }
  | {
      csaf: CsafImporter;
    }
  | {
      osv: OsvImporter;
    }
  | {
      cve: CveImporter;
    }
  | {
      clearlyDefined: ClearlyDefinedImporter;
    }
  | {
      cwe: CweImporter;
    };

export type ImporterData = {
  configuration: ImporterConfiguration;
  /**
   * The continuation token of the importer.
   */
  continuation?: unknown;
  /**
   * The last state change
   */
  lastChange: string;
  /**
   * The error of the last run (empty if successful)
   */
  lastError?: string | null;
  /**
   * The last run (successful or not)
   */
  lastRun?: string | null;
  /**
   * The last successful run
   */
  lastSuccess?: string | null;
  progress?: Progress | null;
  state: State;
};

export type ImporterReport = {
  creation: string;
  error?: string | null;
  id: string;
  importer: string;
  report: unknown;
};

export type Info = {
  build?: {
    [key: string]: unknown;
  };
  version: string;
};

/**
 * The result of the ingestion process
 */
export type IngestResult = {
  /**
   * The ID declared by the document
   */
  document_id: string;
  id: Id;
  /**
   * Warnings that occurred during the import process
   */
  warnings?: Array<string>;
};

export type Labels = {
  [key: string]: string;
};

export type LicenseDetailsPurlSummary = {
  purl: VersionedPurlHead;
  sbom: SbomHead;
};

export type LicenseSummary = {
  id: string;
  license: string;
  purls: number;
  spdx_license_exceptions: Array<string>;
  spdx_licenses: Array<string>;
};

export type MessageType = "human" | "system" | "ai" | "tool";

export type OrganizationDetails = OrganizationHead & {
  /**
   * Advisories issued by the organization, if any.
   */
  advisories: Array<AdvisoryHead>;
};

/**
 * An organization who may issue advisories, product SBOMs, or
 * otherwise be involved in supply-chain evidence.
 */
export type OrganizationHead = {
  /**
   * The `CPE` key of the organization, if known.
   */
  cpe_key: string | null;
  /**
   * The opaque UUID of the organization.
   */
  id: string;
  /**
   * The name of the organization.
   */
  name: string;
  /**
   * The website of the organization, if known.
   */
  website: string | null;
};

export type OrganizationSummary = OrganizationHead & {
  [key: string]: unknown;
};

export type OsvImporter = CommonImporter & {
  /**
   * An optional branch. Will use the default branch otherwise.
   */
  branch?: string | null;
  /**
   * An optional path to start searching for documents. Will use the root of the repository otherwise.
   */
  path?: string | null;
  /**
   * The URL to the git repository of the OSV data
   */
  source: string;
};

export type PackageNode = {
  document_id: string;
  name: string;
  node_id: string;
  product_name: string;
  product_version: string;
  published: string;
  purl: string;
  sbom_id: string;
};

/**
 * Paginated returned items
 */
export type PaginatedAdvisorySummary = {
  /**
   * Returned items
   */
  items: Array<AdvisorySummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedBasePurlSummary = {
  /**
   * Returned items
   */
  items: Array<BasePurlSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedImporterReport = {
  /**
   * Returned items
   */
  items: Array<ImporterReport>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedLicenseDetailsPurlSummary = {
  /**
   * Returned items
   */
  items: Array<LicenseDetailsPurlSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedLicenseSummary = {
  /**
   * Returned items
   */
  items: Array<LicenseSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedOrganizationSummary = {
  /**
   * Returned items
   */
  items: Array<OrganizationSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedProductSummary = {
  /**
   * Returned items
   */
  items: Array<ProductSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedPurlSummary = {
  /**
   * Returned items
   */
  items: Array<PurlSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedSbomPackage = {
  /**
   * Returned items
   */
  items: Array<SbomPackage>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedSbomPackageRelation = {
  /**
   * Returned items
   */
  items: Array<SbomPackageRelation>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedSbomSummary = {
  /**
   * Returned items
   */
  items: Array<SbomSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedSpdxLicenseSummary = {
  /**
   * Returned items
   */
  items: Array<SpdxLicenseSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedVulnerabilitySummary = {
  /**
   * Returned items
   */
  items: Array<VulnerabilitySummary>;
  /**
   * Total number of items found
   */
  total: number;
};

/**
 * Paginated returned items
 */
export type PaginatedWeaknessSummary = {
  /**
   * Returned items
   */
  items: Array<WeaknessSummary>;
  /**
   * Total number of items found
   */
  total: number;
};

export type ProductDetails = ProductHead & {
  vendor: OrganizationSummary | null;
  versions: Array<ProductVersionDetails>;
};

export type ProductHead = {
  id: string;
  name: string;
};

export type ProductSbomHead = {
  labels: Labels;
  published: string | null;
};

export type ProductSummary = ProductHead & {
  vendor: OrganizationSummary | null;
  versions: Array<ProductVersionHead>;
};

export type ProductVersionDetails = ProductVersionHead & {
  sbom?: ProductSbomHead | null;
};

export type ProductVersionHead = {
  id: string;
  sbom_id?: string;
  version: string;
};

export type Progress = {
  /**
   * The current processed items.
   */
  current: number;
  /**
   * The estimated time of completion.
   */
  estimated_completion: string;
  /**
   * The estimated remaining time in seconds.
   */
  estimated_seconds_remaining: number;
  /**
   * Progress in percent (0..=1)
   */
  percent: number;
  /**
   * The average processing rate (per second).
   */
  rate: number;
  /**
   * The total number of items to be processed.
   */
  total: number;
};

export type Purl = string;

export type PurlAdvisory = AdvisoryHead & {
  status: Array<PurlStatus>;
};

export type PurlDetails = PurlHead & {
  advisories: Array<PurlAdvisory>;
  base: BasePurlHead;
  licenses: Array<PurlLicenseSummary>;
  version: VersionedPurlHead;
};

export type PurlHead = {
  purl: Purl;
  /**
   * The ID of the qualified PURL
   */
  uuid: string;
};

export type PurlLicenseSummary = {
  licenses: Array<string>;
  sbom: SbomHead;
};

export type PurlStatus = {
  context: StatusContext | null;
  status: string;
  vulnerability: VulnerabilityHead;
};

export type PurlSummary = PurlHead & {
  base: BasePurlHead;
  qualifiers: {
    [key: string]: string;
  };
  version: VersionedPurlHead;
};

export type Relationship =
  | "contained_by"
  | "dependency_of"
  | "dev_dependency_of"
  | "optional_dependency_of"
  | "provided_dependency_of"
  | "test_dependency_of"
  | "runtime_dependency_of"
  | "example_of"
  | "generated_from"
  | "ancestor_of"
  | "variant_of"
  | "build_tool_of"
  | "dev_tool_of"
  | "described_by"
  | "package_of";

/**
 * A struct wrapping an item with a revision.
 *
 * If the revision should not be part of the payload, but e.g. an HTTP header (like `ETag`), this
 * struct can help carrying both pieces.
 */
export type RevisionedImporter = {
  /**
   * The revision.
   *
   * An opaque string that should have no meaning to the user, only to the backend.
   */
  revision: string;
  value: Importer;
};

export type SbomAdvisory = AdvisoryHead & {
  status: Array<SbomStatus>;
};

export type SbomDetails = SbomSummary & {
  advisories: Array<SbomAdvisory>;
};

export type SbomHead = {
  authors: Array<string>;
  document_id: string;
  id: string;
  labels: Labels;
  name: string;
  published: string | null;
};

export type SbomImporter = CommonImporter & {
  fetchRetries?: number | null;
  keys?: Array<string>;
  onlyPatterns?: Array<string>;
  sizeLimit?: BinaryByteSize | null;
  source: string;
  v3Signatures?: boolean;
};

export type SbomPackage = {
  cpe: Array<string>;
  id: string;
  name: string;
  purl: Array<PurlSummary>;
  version?: string | null;
};

export type SbomPackageRelation = {
  package: SbomPackage;
  relationship: Relationship;
};

export type SbomStatus = {
  context?: StatusContext | null;
  packages: Array<SbomPackage>;
  status: string;
  vulnerability_id: string;
};

export type SbomSummary = SbomHead &
  (SourceDocument | null) & {
    described_by: Array<SbomPackage>;
  };

/**
 * Qualitative Severity Rating Scale
 *
 * Described in CVSS v3.1 Specification: Section 5:
 * <https://www.first.org/cvss/specification-document#t17>
 *
 * > For some purposes it is useful to have a textual representation of the
 * > numeric Base, Temporal and Environmental scores.
 */
export type Severity = "none" | "low" | "medium" | "high" | "critical";

export type SourceDocument = {
  sha256: string;
  sha384: string;
  sha512: string;
};

export type SpdxLicenseDetails = SpdxLicenseSummary & {
  text: string;
};

export type SpdxLicenseSummary = {
  id: string;
  name: string;
};

export type State = "waiting" | "running";

export type StatusContext =
  | {
      purl: Purl;
    }
  | {
      cpe: string;
    };

export type TypeCounts = {
  base: number;
  package: number;
  version: number;
};

export type TypeHead = {
  name: string;
};

export type TypeSummary = TypeHead & {
  counts: TypeCounts;
};

/**
 * a UUID
 */
export type Uuid = string;

export type VersionedPurlAdvisory = AdvisoryHead & {
  status: Array<VersionedPurlStatus>;
};

export type VersionedPurlDetails = VersionedPurlHead & {
  advisories: Array<VersionedPurlAdvisory>;
  base: BasePurlHead;
  purls: Array<PurlHead>;
};

export type VersionedPurlHead = {
  purl: Purl;
  /**
   * The ID of the versioned PURL
   */
  uuid: string;
  /**
   * The version from the PURL
   */
  version: string;
};

export type VersionedPurlStatus = {
  status: string;
  vulnerability: VulnerabilityHead;
};

export type VersionedPurlSummary = VersionedPurlHead & {
  base: BasePurlHead;
  purls: Array<PurlHead>;
};

export type VulnerabilityAdvisoryHead = AdvisoryHead & {
  score: number | null;
  severity: Severity | null;
};

export type VulnerabilityAdvisoryStatus = {
  base_purl: BasePurlHead;
  context: StatusContext | null;
  version: string;
};

export type VulnerabilityAdvisorySummary = VulnerabilityAdvisoryHead & {
  /**
   * CVSS3 scores from this advisory regarding the vulnerability.
   */
  cvss3_scores: Array<string>;
  purls: {
    [key: string]: Array<VulnerabilityAdvisoryStatus>;
  };
  /**
   * SBOMs claimed by this advisory to be addressed by this vulnerability.
   */
  sboms: Array<VulnerabilitySbomStatus>;
};

export type VulnerabilityDetails = VulnerabilityHead & {
  /**
   * Advisories addressing this vulnerability, if any.
   */
  advisories: Array<VulnerabilityAdvisorySummary>;
  /**
   * Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.
   */
  average_score: number | null;
  average_severity: Severity | null;
};

export type VulnerabilityHead = {
  /**
   * Associated CWE, if any.
   */
  cwes: Array<string>;
  /**
   * The description of the vulnerability, if known.
   */
  description: string | null;
  /**
   * The date (in RFC3339 format) of when the vulnerability was discovered, if any.
   */
  discovered: string | null;
  /**
   * The globally-unique identifier for the vulnerability.
   * Traditionally (but not required) refers to the assigned
   * CVE identifier.
   */
  identifier: string;
  /**
   * The date (in RFC3339 format) of when the vulnerability was last modified, if any.
   */
  modified: string | null;
  normative: boolean;
  /**
   * The date (in RFC3339 format) of when the vulnerability was published, if any.
   */
  published: string | null;
  /**
   * The date (in RFC3339 format) of when software containing the vulnerability first released, if known.
   */
  released: string | null;
  /**
   * The title of the vulnerability, if known.
   */
  title: string | null;
  /**
   * The date (in RFC3339 format) of when the vulnerability was last withdrawn, if any.
   */
  withdrawn: string | null;
};

export type VulnerabilitySbomStatus = SbomHead & {
  status: Array<string>;
  version?: string | null;
};

export type VulnerabilitySummary = VulnerabilityHead & {
  advisories: Array<VulnerabilityAdvisoryHead>;
  /**
   * Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.
   */
  average_score: number | null;
  average_severity: Severity | null;
};

export type WeaknessDetails = WeaknessHead & {
  can_also_be?: Array<string> | null;
  can_follow?: Array<string> | null;
  can_precede?: Array<string> | null;
  child_of?: Array<string> | null;
  extended_description?: string | null;
  parent_of?: Array<string> | null;
  peer_of?: Array<string> | null;
  required_by?: Array<string> | null;
  requires?: Array<string> | null;
  starts_with?: Array<string> | null;
};

export type WeaknessHead = {
  description?: string | null;
  id: string;
};

export type WeaknessSummary = WeaknessHead & {
  [key: string]: unknown;
};

export type Which = "left" | "right";

export type InfoResponse = {
  build?: {
    [key: string]: unknown;
  };
  version: string;
};

export type InfoError = unknown;

export type ListAdvisoriesData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListAdvisoriesResponse = PaginatedAdvisorySummary;

export type ListAdvisoriesError = unknown;

export type UploadAdvisoryData = {
  body: Blob | File;
  query: {
    /**
     * Optional issuer if it cannot be determined from advisory contents.
     */
    issuer?: string | null;
    /**
     * Optional labels.
     *
     * Only use keys with a prefix of `labels.`
     */
    labels: Labels;
  };
};

export type UploadAdvisoryResponse = unknown;

export type UploadAdvisoryError = unknown;

export type UpdateAdvisoryLabelsData = {
  body: Labels;
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: Id;
  };
};

export type UpdateAdvisoryLabelsResponse = void;

export type UpdateAdvisoryLabelsError = unknown;

export type PatchAdvisoryLabelsData = {
  body: Labels;
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: Id;
  };
};

export type PatchAdvisoryLabelsResponse = void;

export type PatchAdvisoryLabelsError = unknown;

export type GetAdvisoryData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    key: string;
  };
};

export type GetAdvisoryResponse = AdvisoryDetails;

export type GetAdvisoryError = unknown;

export type DeleteAdvisoryData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    key: string;
  };
};

export type DeleteAdvisoryResponse = AdvisoryDetails;

export type DeleteAdvisoryError = unknown;

export type DownloadAdvisoryData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>'
     */
    key: string;
  };
};

export type DownloadAdvisoryResponse = Blob | File;

export type DownloadAdvisoryError = unknown;

export type CompletionsData = {
  body: ChatState;
};

export type CompletionsResponse = ChatState;

export type CompletionsError = unknown;

export type SearchComponentDepsData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type SearchComponentDepsResponse = DepSummary;

export type SearchComponentDepsError = unknown;

export type GetComponentDepsData = {
  path: {
    /**
     * provide component name or URL-encoded pURL itself
     */
    key: string;
  };
};

export type GetComponentDepsResponse = DepSummary;

export type GetComponentDepsError = unknown;

export type SearchComponentRootComponentsData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type SearchComponentRootComponentsResponse = AncestorSummary;

export type SearchComponentRootComponentsError = unknown;

export type GetComponentRootComponentsData = {
  path: {
    /**
     * provide component name or URL-encoded pURL itself
     */
    key: string;
  };
};

export type GetComponentRootComponentsResponse = AncestorSummary;

export type GetComponentRootComponentsError = unknown;

export type StatusResponse = AnalysisStatus;

export type StatusError = unknown;

export type UploadDatasetData = {
  body: Blob | File;
  query: {
    /**
     * Optional labels.
     *
     * Only use keys with a prefix of `labels.`
     */
    labels: Labels;
  };
};

export type UploadDatasetResponse = unknown;

export type UploadDatasetError = unknown;

export type ListImportersResponse = Array<Importer>;

export type ListImportersError = unknown;

export type GetImporterData = {
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type GetImporterResponse = RevisionedImporter;

export type GetImporterError = unknown;

export type CreateImporterData = {
  body: ImporterConfiguration;
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type CreateImporterResponse = unknown;

export type CreateImporterError = unknown;

export type UpdateImporterData = {
  body: ImporterConfiguration;
  headers?: {
    /**
     * The revision to update
     */
    "if-match"?: string | null;
  };
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type UpdateImporterResponse = unknown;

export type UpdateImporterError = unknown;

export type DeleteImporterData = {
  headers?: {
    /**
     * The revision to delete
     */
    "if-match"?: string | null;
  };
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type DeleteImporterResponse = unknown;

export type DeleteImporterError = unknown;

export type PatchImporterData = {
  body: unknown;
  headers?: {
    /**
     * The revision to update
     */
    "if-match"?: string | null;
  };
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type PatchImporterResponse = unknown;

export type PatchImporterError = unknown;

export type EnableImporterData = {
  body: boolean;
  headers?: {
    /**
     * The revision to update
     */
    "if-match"?: string | null;
  };
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type EnableImporterResponse = unknown;

export type EnableImporterError = unknown;

export type ForceRunImporterData = {
  body: boolean;
  headers?: {
    /**
     * The revision to update
     */
    "if-match"?: string | null;
  };
  path: {
    /**
     * The name of the importer
     */
    name: string;
  };
};

export type ForceRunImporterResponse = unknown;

export type ForceRunImporterError = unknown;

export type ListImporterReportsData = {
  path: {
    name: string;
  };
};

export type ListImporterReportsResponse = PaginatedImporterReport;

export type ListImporterReportsError = unknown;

export type ListLicensesData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListLicensesResponse = PaginatedLicenseSummary;

export type ListLicensesError = unknown;

export type ListSpdxLicensesData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListSpdxLicensesResponse = PaginatedSpdxLicenseSummary;

export type ListSpdxLicensesError = unknown;

export type GetSpdxLicenseData = {
  path: {
    id: string;
  };
};

export type GetSpdxLicenseResponse = SpdxLicenseDetails;

export type GetSpdxLicenseError = unknown;

export type GetLicensesData = {
  path: {
    uuid: string;
  };
};

export type GetLicensesResponse = LicenseSummary;

export type GetLicensesError = unknown;

export type GetLicensePurlsData = {
  path: {
    uuid: string;
  };
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type GetLicensePurlsResponse = LicenseSummary;

export type GetLicensePurlsError = unknown;

export type ListOrganizationsData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListOrganizationsResponse = PaginatedOrganizationSummary;

export type ListOrganizationsError = unknown;

export type GetOrganizationData = {
  path: {
    /**
     * Opaque ID of the organization
     */
    id: string;
  };
};

export type GetOrganizationResponse = OrganizationDetails;

export type GetOrganizationError = unknown;

export type ListProductsData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListProductsResponse = PaginatedProductSummary;

export type ListProductsError = unknown;

export type GetProductData = {
  path: {
    /**
     * Opaque ID of the product
     */
    id: string;
  };
};

export type GetProductResponse = ProductDetails;

export type GetProductError = unknown;

export type DeleteProductData = {
  path: {
    /**
     * Opaque ID of the product
     */
    id: string;
  };
};

export type DeleteProductResponse = ProductDetails;

export type DeleteProductError = unknown;

export type ListPurlData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListPurlResponse = PaginatedPurlSummary;

export type ListPurlError = unknown;

export type ListBasePurlsData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListBasePurlsResponse = PaginatedBasePurlSummary;

export type ListBasePurlsError = unknown;

export type GetBasePurlData = {
  path: {
    /**
     * opaque identifier for a base PURL, or a URL-encoded pURL itself
     */
    key: string;
  };
};

export type GetBasePurlResponse = BasePurlDetails;

export type GetBasePurlError = unknown;

export type ListPurlTypesResponse = Array<TypeSummary>;

export type ListPurlTypesError = unknown;

export type GetPurlTypeData = {
  path: {
    /**
     * PURL identifier of a type
     */
    type: string;
  };
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type GetPurlTypeResponse = PaginatedBasePurlSummary;

export type GetPurlTypeError = unknown;

export type GetBasePurlOfTypeData = {
  path: {
    /**
     * name of the package optionally preceded by its namespace
     */
    namespace_and_name: string;
    /**
     * PURL identifier of a type
     */
    type: string;
  };
};

export type GetBasePurlOfTypeResponse = BasePurlDetails;

export type GetBasePurlOfTypeError = unknown;

export type GetVersionedPurlOfTypeData = {
  path: {
    /**
     * name of the package optionally preceded by its namespace
     */
    namespace_and_name: string;
    /**
     * PURL identifier of a type
     */
    type: string;
    /**
     * version of the package
     */
    version: string;
  };
};

export type GetVersionedPurlOfTypeResponse = VersionedPurlDetails;

export type GetVersionedPurlOfTypeError = unknown;

export type GetVersionedPurlData = {
  path: {
    /**
     * opaque ID identifier for a package version, or URL-ecnoded pURL itself
     */
    key: string;
  };
};

export type GetVersionedPurlResponse = VersionedPurlDetails;

export type GetVersionedPurlError = unknown;

export type GetPurlData = {
  path: {
    /**
     * opaque identifier for a fully-qualified PURL, or URL-encoded pURL itself
     */
    key: string;
  };
};

export type GetPurlResponse = PurlDetails;

export type GetPurlError = unknown;

export type ListSbomsData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListSbomsResponse = PaginatedSbomSummary;

export type ListSbomsError = unknown;

export type UploadSbomData = {
  body: Blob | File;
  query: {
    /**
     * Optional labels.
     *
     * Only use keys with a prefix of `labels.`
     */
    labels: Labels;
    /**
     * Source the document came from
     */
    location: string;
  };
};

export type UploadSbomResponse = IngestResult;

export type UploadSbomError = unknown;

export type ListRelatedSbomsData = {
  query?: {
    /**
     * Find by a ID of a package
     */
    id?: string | null;
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    /**
     * Find by PURL
     */
    purl?: Purl | null;
    q?: string;
    sort?: string;
  };
};

export type ListRelatedSbomsResponse = PaginatedSbomSummary;

export type ListRelatedSbomsError = unknown;

export type GetSbomData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: string;
  };
};

export type GetSbomResponse = SbomSummary;

export type GetSbomError = unknown;

export type DeleteSbomData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: string;
  };
};

export type DeleteSbomResponse = SbomSummary;

export type DeleteSbomError = unknown;

export type GetSbomAdvisoriesData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: string;
  };
};

export type GetSbomAdvisoriesResponse = Array<SbomAdvisory>;

export type GetSbomAdvisoriesError = unknown;

export type UpdateSbomLabelsData = {
  body: Labels;
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: Id;
  };
};

export type UpdateSbomLabelsResponse = void;

export type UpdateSbomLabelsError = unknown;

export type PatchSbomLabelsData = {
  body: Labels;
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>' or 'urn:uuid:<uuid>'
     */
    id: Id;
  };
};

export type PatchSbomLabelsResponse = void;

export type PatchSbomLabelsError = unknown;

export type ListPackagesData = {
  path: {
    /**
     * ID of the SBOM to get packages for
     */
    id: string;
  };
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListPackagesResponse = PaginatedSbomPackage;

export type ListPackagesError = unknown;

export type ListRelatedPackagesData = {
  path: {
    /**
     * ID of SBOM to search packages in
     */
    id: string;
  };
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    /**
     * The Package to use as reference
     */
    reference?: string | null;
    /**
     * Optional relationship filter
     */
    relationship?: Relationship | null;
    sort?: string;
    /**
     * Which side the reference should be on
     */
    which?: Which;
  };
};

export type ListRelatedPackagesResponse = PaginatedSbomPackageRelation;

export type ListRelatedPackagesError = unknown;

export type DownloadSbomData = {
  path: {
    /**
     * Digest/hash of the document, prefixed by hash type, such as 'sha256:<hash>'
     */
    key: string;
  };
};

export type DownloadSbomResponse = Blob | File;

export type DownloadSbomError = unknown;

export type ListVulnerabilitiesData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListVulnerabilitiesResponse = PaginatedVulnerabilitySummary;

export type ListVulnerabilitiesError = unknown;

export type GetVulnerabilityData = {
  path: {
    /**
     * ID of the vulnerability
     */
    id: string;
  };
};

export type GetVulnerabilityResponse = VulnerabilityDetails;

export type GetVulnerabilityError = unknown;

export type DeleteVulnerabilityData = {
  path: {
    /**
     * ID of the vulnerability
     */
    id: string;
  };
};

export type DeleteVulnerabilityResponse = VulnerabilityDetails;

export type DeleteVulnerabilityError = unknown;

export type ListWeaknessesData = {
  query?: {
    /**
     * The maximum number of entries to return.
     *
     * Zero means: no limit
     */
    limit?: number;
    /**
     * The first item to return, skipping all that come before it.
     *
     * NOTE: The order of items is defined by the API being called.
     */
    offset?: number;
    q?: string;
    sort?: string;
  };
};

export type ListWeaknessesResponse = PaginatedLicenseSummary;

export type ListWeaknessesError = unknown;

export type GetWeaknessData = {
  path: {
    id: string;
  };
};

export type GetWeaknessResponse = LicenseSummary;

export type GetWeaknessError = unknown;
