import React from "react";
import { Link } from "react-router-dom";

import dayjs from "dayjs";

import { Toolbar, ToolbarContent, ToolbarItem } from "@patternfly/react-core";
import { Table, Tbody, Td, Th, Thead, Tr } from "@patternfly/react-table";

import { FilterType } from "@app/components/FilterToolbar";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { VulnerabilityStatusLabel } from "@app/components/VulnerabilityStatusLabel";
import { useSbomsOfVulnerability } from "@app/hooks/domain-controls/useSbomsOfVulnerability";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { useWithUiId } from "@app/utils/query-utils";
import { formatDate } from "@app/utils/utils";

interface SbomsByVulnerabilityProps {
  vulnerabilityId: string;
}

export const SbomsByVulnerability: React.FC<SbomsByVulnerabilityProps> = ({
  vulnerabilityId,
}) => {
  const {
    data: { sboms },
    isFetching,
    fetchError,
  } = useSbomsOfVulnerability(vulnerabilityId);

  const tableDataWithUiId = useWithUiId(
    sboms,
    (d) => `${d.sbom.id}-${d.sbomStatus}`
  );

  const tableControls = useLocalTableControls({
    tableName: "sboms-table",
    idProperty: "_ui_unique_id",
    items: tableDataWithUiId,
    isLoading: false,
    columnNames: {
      name: "Name",
      version: "Version",
      status: "Status",
      dependencies: "Dependencies",
      supplier: "Supplier",
      created: "Created on",
    },
    hasActionsColumn: false,
    isSortEnabled: true,
    sortableColumns: ["name", "dependencies", "created"],
    getSortValues: (item) => ({
      name: item.sbom.name,
      dependencies: item.sbom.number_of_packages,
      created: item.sbom?.published ? dayjs(item.sbom.published).valueOf() : 0,
    }),
    isPaginationEnabled: true,
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "filterText",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
        getItemValue: (item) => item.sbom?.name ?? "",
      },
    ],
    isExpansionEnabled: false,
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  return (
    <>
      {tableControls.isFilterEnabled && (
        <Toolbar {...toolbarProps}>
          <ToolbarContent>
            <ToolbarItem {...paginationToolbarItemProps}>
              <SimplePagination
                idPrefix="sbom-table"
                isTop
                paginationProps={paginationProps}
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      )}

      <Table {...tableProps} aria-label="Sbom table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "name" })} />
              <Th {...getThProps({ columnKey: "version" })} />
              <Th {...getThProps({ columnKey: "status" })} />
              <Th {...getThProps({ columnKey: "dependencies" })} />
              <Th {...getThProps({ columnKey: "supplier" })} />
              <Th {...getThProps({ columnKey: "created" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={isFetching}
          isError={!!fetchError}
          isNoData={tableDataWithUiId.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item._ui_unique_id} isExpanded={isCellExpanded(item)}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td width={25} {...getTdProps({ columnKey: "name" })}>
                      <Link to={`/sboms/${item.sbom.id}`}>
                        {item?.sbom?.name}
                      </Link>
                    </Td>
                    <Td width={10} {...getTdProps({ columnKey: "version" })}>
                      {item.sbom?.version}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "status" })}
                    >
                      <VulnerabilityStatusLabel value={item.sbomStatus} />
                    </Td>
                    <Td
                      width={10}
                      {...getTdProps({ columnKey: "dependencies" })}
                    >
                      {item?.sbom?.number_of_packages}
                    </Td>
                    <Td width={10} {...getTdProps({ columnKey: "supplier" })}>
                      {item?.sbom?.authors.join(", ")}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "created" })}
                    >
                      {formatDate(item.sbom?.published)}
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="sboms-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />
    </>
  );
};
