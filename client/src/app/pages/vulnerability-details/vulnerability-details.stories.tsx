import type { Meta, StoryObj } from "@storybook/react";
import { BrowserRouter } from "react-router-dom";
import React from "react";
import { CveDetails } from "./vulnerability-details";
import { http, HttpResponse } from "msw";
import getCve from "@mocks/data/cves/CVE-2024-29025/get.json";
import sbom1 from "@mocks/data/cves/CVE-2024-29025/0193013f-0f00-77e1-afe4-b7d7f8585b7a.json";
import sbom2 from "@mocks/data/cves/CVE-2024-29025/0193013f-1b8a-7152-8857-8b8f4238b8ba.json";

const meta = {
  title: "Components/vulnerability-details/vulnerability-details.tsx",
  component: CveDetails,
  parameters: {
    query: {
      vulnerabilityId: "CVE-2024-29025",
    },
  },
  tags: ["autodocs"],
  decorators: [
    (Story) => (
      <BrowserRouter>
        <Story />
      </BrowserRouter>
    ),
  ],
} satisfies Meta<typeof CveDetails>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {},
  parameters: {
    msw: {
      handlers: [
        http.get("/api/v1/vulnerability/CVE-2024-29025", () => {
          return HttpResponse.json(getCve);
        }),
        http.get(
          "/api/v1/sbom/urn%3Auuid%3A0193013f-0f00-77e1-afe4-b7d7f8585b7a",
          () => {
            return HttpResponse.json(sbom1);
          }
        ),
        http.get(
          "/api/v1/sbom/urn%3Auuid%3A0193013f-1b8a-7152-8857-8b8f4238b8ba",
          () => {
            return HttpResponse.json(sbom2);
          }
        ),
      ],
    },
  },
  render: () => {
    const urlParams = new URLSearchParams(document.location.search);
    const mockedParam = urlParams.get("vulnerabilityId");
    return <div>Mocked value: {mockedParam}</div>;
  },
};
