import React from "react";
import { Link } from "react-router-dom";

import {
  Breadcrumb,
  BreadcrumbItem,
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  Divider,
  PageSection,
  Split,
  SplitItem,
  Stack,
  StackItem,
  Tab,
  TabTitleText,
  Tabs,
  Text,
  TextContent
} from "@patternfly/react-core";

import { PathParam, useRouteParams } from "@app/Routes";
import { LoadingWrapper } from "@app/components/LoadingWrapper";
import { SeverityShieldAndText } from "@app/components/SeverityShieldAndText";
import { useFetchVulnerabilityById } from "@app/queries/vulnerabilities";
import { formatDate } from "@app/utils/utils";

import { AdvisoriesByVulnerability } from "./advisories-by-vulnerability";
import { PackagesByVulnerability } from "./packages-by-vulnerability";

export const CveDetails: React.FC = () => {
  const vulnerabilityId = useRouteParams(PathParam.VULNERABILITY_ID);

  const { vulnerability, isFetching, fetchError } =
    useFetchVulnerabilityById(vulnerabilityId);

  return (
    <>
      <PageSection variant="light" type="breadcrumb">
        <Breadcrumb>
          <BreadcrumbItem key="vulnerabilities">
            <Link to="/vulnerabilities">Vulnerabilities</Link>
          </BreadcrumbItem>
          <BreadcrumbItem isActive>Vulnerability details</BreadcrumbItem>
        </Breadcrumb>
      </PageSection>
      <PageSection variant="light">
        <Stack hasGutter>
          <StackItem>
            <Split hasGutter>
              <SplitItem>
                <TextContent>
                  <Text component="h1">{vulnerabilityId}</Text>
                </TextContent>
              </SplitItem>
              <SplitItem isFilled>
                {vulnerability?.average_severity && (
                  <SeverityShieldAndText
                    value={vulnerability.average_severity}
                  />
                )}
              </SplitItem>
            </Split>
          </StackItem>
          <Divider />
          <StackItem>
            <DescriptionList columnModifier={{ lg: "3Col" }}>
              <DescriptionListGroup>
                <DescriptionListTerm>Title</DescriptionListTerm>
                <DescriptionListDescription>
                  {vulnerability?.title}
                </DescriptionListDescription>
              </DescriptionListGroup>
              <DescriptionListGroup>
                <DescriptionListTerm>Published</DescriptionListTerm>
                <DescriptionListDescription>
                  {formatDate(vulnerability?.published)}
                </DescriptionListDescription>
              </DescriptionListGroup>
              <DescriptionListGroup>
                <DescriptionListTerm>Modified</DescriptionListTerm>
                <DescriptionListDescription>
                  {formatDate(vulnerability?.modified)}
                </DescriptionListDescription>
              </DescriptionListGroup>
            </DescriptionList>
          </StackItem>
          <Divider />
          <StackItem>
            <Tabs defaultActiveKey={0} aria-label="CVE tabs" role="region">
              <Tab
                eventKey={0}
                title={<TabTitleText>SBOMs</TabTitleText>}
              >
                {/* <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
                  {vulnerability && (
                    <RelatedSBOMs sboms={vulnerability.related_sboms} />
                  )}
                </LoadingWrapper> */}
                <p style={{ color: "red" }}>
                  List of products/sboms affected by this Vulnerability
                  (issue-282)
                </p>
              </Tab>
              <Tab
                eventKey={1}
                title={<TabTitleText>Packages</TabTitleText>}
              >
                <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
                  {vulnerability && (
                    <PackagesByVulnerability advisories={vulnerability.advisories} />
                  )}
                </LoadingWrapper>
              </Tab>
              <Tab
                eventKey={2}
                title={<TabTitleText>Advisories</TabTitleText>}
              >
                <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
                  {vulnerability && (
                    <AdvisoriesByVulnerability advisories={vulnerability.advisories} />
                  )}
                </LoadingWrapper>
              </Tab>
            </Tabs>
          </StackItem>
        </Stack>
      </PageSection>
    </>
  );
};
