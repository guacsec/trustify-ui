import React from "react";

import {
  Button,
  ButtonVariant,
  Label,
  TextContent,
  Title,
  Toolbar,
  ToolbarContent,
  ToolbarItem,
} from "@patternfly/react-core";
import spacing from "@patternfly/react-styles/css/utilities/Spacing/spacing";
import {
  Table,
  TableProps,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import {
  DecomposedPurl,
  VulnerabilityStatus,
} from "@app/api/models";
import { AdvisoryInDrawerInfo } from "@app/components/AdvisoryInDrawerInfo";
import { FilterToolbar, FilterType } from "@app/components/FilterToolbar";
import { PackageInDrawerInfo } from "@app/components/PackageInDrawerInfo";
import { PageDrawerContent } from "@app/components/PageDrawerContext";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { useWithUiId } from "@app/utils/query-utils";
import { decomposePurl } from "@app/utils/utils";
import {Purl, StatusContext, VulnerabilityAdvisorySummary} from "../../client";

interface TableData {
  basePurl: {
    uuid: string;
    purl: string;
  };
  versionRange: string;
  status: VulnerabilityStatus;
  context: StatusContext | null;
  advisory: VulnerabilityAdvisorySummary;
  decomposedPurl?: DecomposedPurl;
}

interface PackagesByVulnerabilityProps {
  variant?: TableProps["variant"];
  initialItemsPerPage?: number;
  advisories: VulnerabilityAdvisorySummary[];
}

export const ShowStatusContext = ({value}: {
  value: StatusContext | null
}) => {
  if (!value) {
    return null;
  }
  let cpe = value as { cpe: string; }
  if ( cpe.cpe ) {
    return cpe.cpe;
  }
  let purl = value as { purl: Purl; }
  return purl.purl;
}

export const PackagesByVulnerability: React.FC<
  PackagesByVulnerabilityProps
> = ({ variant, initialItemsPerPage, advisories }) => {
  type RowAction = "showPackage" | "showAdvisory";
  const [selectedRowAction, setSelectedRowAction] =
    React.useState<RowAction | null>(null);
  const [selectedRow, setSelectedRow] = React.useState<TableData | null>(null);

  const showDrawer = (action: RowAction, row: TableData) => {
    setSelectedRowAction(action);
    setSelectedRow(row);
  };

  //
  const tableData = React.useMemo(
    () =>
      advisories.flatMap((advisory) =>
        Object.entries(advisory.purls ?? {}).flatMap(
          ([status, packagesByStatus]) =>
            packagesByStatus.map((affectedPackage) => {
              const basePurl = affectedPackage.base_purl;
              const result: TableData = {
                basePurl: { ...basePurl },
                advisory: { ...advisory },
                status: status as VulnerabilityStatus,
                context: affectedPackage.context,
                versionRange: affectedPackage.version,
                decomposedPurl: decomposePurl(basePurl.purl),
              };
              return result;
            })
        )
      ),
    [advisories]
  );

  const tableDataWithUiId = useWithUiId(
    tableData,
    (d) => `${d.basePurl.purl}-${d.advisory.identifier}-${d.status}`
  );

  const allAdvisoryStatus = React.useMemo(() => {
    const allUniqueStatus = new Set<VulnerabilityStatus>();

    tableData.forEach((item) => allUniqueStatus.add(item.status));
    return allUniqueStatus;
  }, [tableData]);

  const tableControls = useLocalTableControls({
    variant: variant,
    tableName: "package-table",
    idProperty: "_ui_unique_id",
    items: tableDataWithUiId,
    isLoading: false,
    columnNames: {
      name: "Name",
      namespace: "Namespace",
      affectedVersions: "Affected version",
      advisory: "Advisory",
      context: "Context",
      status: "Status",
    },
    hasActionsColumn: false,
    isSortEnabled: false,
    sortableColumns: ["name"],
    getSortValues: (item) => ({
      name: item.decomposedPurl?.name ?? item.basePurl.purl,
    }),
    isPaginationEnabled: true,
    initialItemsPerPage: initialItemsPerPage,
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
        getItemValue: (item) => item.decomposedPurl?.name ?? item.basePurl.purl,
      },
      {
        categoryKey: "status",
        title: "Status",
        placeholderText: "Status",
        type: FilterType.multiselect,
        selectOptions: Array.from(allAdvisoryStatus).map((item) => ({
          value: item,
          label: item.charAt(0).toUpperCase() + item.slice(1).replace("_", " "),
        })),
        matcher: (filter: string, item: TableData) => item.status === filter,
      },
    ],
    isExpansionEnabled: false,
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
  } = tableControls;

  return (
    <>
      <Toolbar {...toolbarProps}>
        <ToolbarContent>
          <FilterToolbar showFiltersSideBySide {...filterToolbarProps} />
          <ToolbarItem {...paginationToolbarItemProps}>
            <SimplePagination
              idPrefix="package-table"
              isTop
              paginationProps={paginationProps}
            />
          </ToolbarItem>
        </ToolbarContent>
      </Toolbar>

      <Table {...tableProps} aria-label="Package table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "name" })} />
              <Th {...getThProps({ columnKey: "namespace" })} />
              <Th {...getThProps({ columnKey: "affectedVersions" })} />
              <Th {...getThProps({ columnKey: "advisory" })} />
              <Th {...getThProps({ columnKey: "context" })} />
              <Th {...getThProps({ columnKey: "status" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={undefined}
          isNoData={tableData.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item.basePurl.purl}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td
                      width={25}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "name" })}
                    >
                      <Button
                        size="sm"
                        variant={ButtonVariant.secondary}
                        onClick={() => showDrawer("showPackage", item)}
                      >
                        {item.decomposedPurl
                          ? item.decomposedPurl?.name
                          : item.basePurl.purl}
                      </Button>
                    </Td>
                    <Td
                      width={15}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "namespace" })}
                    >
                      {item.decomposedPurl?.namespace}
                    </Td>
                    <Td
                      width={10}
                      {...getTdProps({ columnKey: "affectedVersions" })}
                    >
                      <Label color="grey">{item.versionRange}</Label>
                    </Td>
                    <Td
                      width={15}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "advisory" })}
                    >
                      <Button
                        size="sm"
                        variant={ButtonVariant.secondary}
                        onClick={() => showDrawer("showAdvisory", item)}
                      >
                        {item.advisory.identifier}
                      </Button>
                    </Td>
                    <Td
                      width={25}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "context" })}
                    >
                      <ShowStatusContext value={item.context} />
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "status" })}
                    >
                      <Label>
                        {item.status.charAt(0).toUpperCase() +
                          item.status.slice(1).replace("_", " ")}
                      </Label>
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="package-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />

      <PageDrawerContent
        isExpanded={selectedRowAction !== null}
        onCloseClick={() => setSelectedRowAction(null)}
        pageKey="drawer"
        drawerPanelContentProps={{ defaultSize: "600px" }}
        header={
          <>
            {selectedRowAction === "showPackage" && (
              <TextContent>
                <Title headingLevel="h2" size="lg" className={spacing.mtXs}>
                  Package
                </Title>
              </TextContent>
            )}
            {selectedRowAction === "showAdvisory" && (
              <TextContent>
                <Title headingLevel="h2" size="lg" className={spacing.mtXs}>
                  Advisory
                </Title>
              </TextContent>
            )}
          </>
        }
      >
        {selectedRowAction === "showPackage" && (
          <>
            {selectedRow?.decomposedPurl && (
              <PackageInDrawerInfo
                decomposedPurl={selectedRow?.decomposedPurl}
              />
            )}
          </>
        )}
        {selectedRowAction === "showAdvisory" && (
          <>
            {selectedRow?.advisory && (
              <AdvisoryInDrawerInfo advisoryId={selectedRow?.advisory.uuid} />
            )}
          </>
        )}
      </PageDrawerContent>
    </>
  );
};
