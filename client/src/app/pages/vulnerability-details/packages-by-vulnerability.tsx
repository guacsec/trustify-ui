import React from "react";
import { NavLink } from "react-router-dom";

import {
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  Label,
  Toolbar,
  ToolbarContent,
  ToolbarItem,
} from "@patternfly/react-core";
import {
  ExpandableRowContent,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import {
  AdvisoryWithinVulnerability,
  DecomposedPurl,
  StatusType,
} from "@app/api/models";
import { FilterToolbar, FilterType } from "@app/components/FilterToolbar";
import { PackageQualifiers } from "@app/components/PackageQualifiers";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { useWithUiId } from "@app/utils/query-utils";
import { decomposePurl, formatDate } from "@app/utils/utils";

interface TableData {
  purl: string;
  versionRange: string;
  status: StatusType;
  advisory: AdvisoryWithinVulnerability;
  decomposedPurl?: DecomposedPurl;
}

interface PackagesByVulnerabilityProps {
  advisories: AdvisoryWithinVulnerability[];
}

export const PackagesByVulnerability: React.FC<
  PackagesByVulnerabilityProps
> = ({ advisories }) => {
  const tableData = React.useMemo(() => {
    return advisories.flatMap((advisory) => {
      return Object.entries(advisory.statuses ?? {}).flatMap(
        ([status, packagesByStatus]) => {
          return packagesByStatus.map((pkg) => {
            const result: TableData = {
              purl: pkg.package.purl,
              advisory: { ...advisory },
              status: status as StatusType,
              versionRange: pkg.version,
              decomposedPurl: decomposePurl(pkg.package.purl),
            };
            return result;
          });
        }
      );
    });
  }, [advisories]);

  const tableDataWithUiId = useWithUiId(
    tableData,
    (d) => `${d.purl}-${d.advisory.identifier}-${d.status}`
  );

  const allAdvisoryStatus = React.useMemo(() => {
    const allUniqueStatus = new Set<StatusType>();
    allUniqueStatus.add("affected"); // Make sure this one always exists

    tableData.forEach((item) => allUniqueStatus.add(item.status));
    return allUniqueStatus;
  }, [tableData]);

  const tableControls = useLocalTableControls({
    tableName: "package-table",
    idProperty: "_ui_unique_id",
    items: tableDataWithUiId,
    isLoading: false,
    columnNames: {
      name: "Name",
      namespace: "Namespace",
      version: "Version",
      type: "Type",
      qualifiers: "Qualifiers",
      affectedVersions: "Affected version",
      advisory: "Advisory",
    },
    hasActionsColumn: true,
    isSortEnabled: false,
    sortableColumns: ["name"],
    getSortValues: (item) => ({
      name: item.decomposedPurl?.name ?? item.purl,
    }),
    isPaginationEnabled: true,
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
        getItemValue: (item) => item.decomposedPurl?.name ?? item.purl,
      },
      {
        categoryKey: "status",
        title: "Status",
        placeholderText: "Status",
        type: FilterType.multiselect,
        selectOptions: Array.from(allAdvisoryStatus).map((item) => ({
          value: item,
          label: item.charAt(0).toUpperCase() + item.slice(1).replace("_", " "),
        })),
        matcher: (filter: string, item: TableData) => item.status === filter,
      },
    ],
    initialFilterValues: {
      status: ["affected"],
    },
    isExpansionEnabled: true,
    expandableVariant: "compound",
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
      getExpandedContentTdProps,
    },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  return (
    <>
      {tableControls.isFilterEnabled && (
        <Toolbar {...toolbarProps}>
          <ToolbarContent>
            <FilterToolbar showFiltersSideBySide {...filterToolbarProps} />
            <ToolbarItem {...paginationToolbarItemProps}>
              <SimplePagination
                idPrefix="package-table"
                isTop
                paginationProps={paginationProps}
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      )}
      <Table {...tableProps} aria-label="Package table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "name" })} />
              <Th {...getThProps({ columnKey: "namespace" })} />
              <Th {...getThProps({ columnKey: "version" })} />
              <Th {...getThProps({ columnKey: "type" })} />
              <Th {...getThProps({ columnKey: "qualifiers" })} />
              <Th {...getThProps({ columnKey: "affectedVersions" })} />
              <Th {...getThProps({ columnKey: "advisory" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={undefined}
          isNoData={tableData.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item.purl} isExpanded={isCellExpanded(item)}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td
                      width={20}
                      {...getTdProps({
                        columnKey: "name",
                        isCompoundExpandToggle: true,
                        item: item,
                        rowIndex,
                      })}
                    >
                      <NavLink
                        to={`/packages/${encodeURIComponent(item.purl)}`}
                      >
                        {item.decomposedPurl
                          ? item.decomposedPurl?.name
                          : item.purl}
                      </NavLink>
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "namespace" })}
                    >
                      {item.decomposedPurl?.namespace}
                    </Td>
                    <Td
                      width={15}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "version" })}
                    >
                      {item.decomposedPurl?.version}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "type" })}
                    >
                      {item.decomposedPurl?.type}
                    </Td>
                    <Td width={30} {...getTdProps({ columnKey: "qualifiers" })}>
                      {item.decomposedPurl?.qualifiers && (
                        <PackageQualifiers
                          value={item.decomposedPurl?.qualifiers}
                        />
                      )}
                    </Td>
                    <Td
                      width={10}
                      {...getTdProps({ columnKey: "affectedVersions" })}
                    >
                      <Label color="grey">{item.versionRange}</Label>
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({
                        columnKey: "advisory",
                        isCompoundExpandToggle: true,
                        item: item,
                        rowIndex,
                      })}
                    >
                      {item.status.charAt(0).toUpperCase() +
                        item.status.slice(1).replace("_", " ")}
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
                {isCellExpanded(item) ? (
                  <Tr isExpanded>
                    <Td
                      {...getExpandedContentTdProps({
                        item,
                      })}
                    >
                      <ExpandableRowContent>
                        {isCellExpanded(item, "name") ? (
                          <div className="pf-v5-u-m-md">
                            <DescriptionList>
                              <DescriptionListGroup>
                                <DescriptionListTerm>Purl</DescriptionListTerm>
                                <DescriptionListDescription>
                                  {item.purl}
                                </DescriptionListDescription>
                              </DescriptionListGroup>
                              <DescriptionListGroup>
                                <DescriptionListTerm>Path</DescriptionListTerm>
                                <DescriptionListDescription>
                                  {item.decomposedPurl?.path}
                                </DescriptionListDescription>
                              </DescriptionListGroup>
                            </DescriptionList>
                          </div>
                        ) : null}
                        {isCellExpanded(item, "advisory") ? (
                          <div className="pf-v5-u-m-md">
                            <DescriptionList>
                              <DescriptionListGroup>
                                <DescriptionListTerm>
                                  Identifier
                                </DescriptionListTerm>
                                <DescriptionListDescription>
                                  <NavLink
                                    to={`/advisories/${item.advisory.uuid}`}
                                  >
                                    {item.advisory.identifier}
                                  </NavLink>
                                </DescriptionListDescription>
                              </DescriptionListGroup>
                              <DescriptionListGroup>
                                <DescriptionListTerm>Title</DescriptionListTerm>
                                <DescriptionListDescription>
                                  {item.advisory.title}
                                </DescriptionListDescription>
                              </DescriptionListGroup>
                              <DescriptionListGroup>
                                <DescriptionListTerm>
                                  Published
                                </DescriptionListTerm>
                                <DescriptionListDescription>
                                  {formatDate(item.advisory.published)}
                                </DescriptionListDescription>
                              </DescriptionListGroup>
                              <DescriptionListGroup>
                                <DescriptionListTerm>
                                  Modified
                                </DescriptionListTerm>
                                <DescriptionListDescription>
                                  {formatDate(item.advisory.modified)}
                                </DescriptionListDescription>
                              </DescriptionListGroup>
                            </DescriptionList>
                          </div>
                        ) : null}
                      </ExpandableRowContent>
                    </Td>
                  </Tr>
                ) : null}
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="package-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />
    </>
  );
};
