import React from "react";

import {
  Button,
  ButtonVariant,
  TextContent,
  Title,
  Toolbar,
  ToolbarContent,
  ToolbarItem,
} from "@patternfly/react-core";
import spacing from "@patternfly/react-styles/css/utilities/Spacing/spacing";
import {
  Table,
  TableProps,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import { AdvisoryWithinVulnerability } from "@app/api/models";
import { AdvisoryInDrawerInfo } from "@app/components/AdvisoryInDrawerInfo";
import { FilterToolbar } from "@app/components/FilterToolbar";
import { PageDrawerContent } from "@app/components/PageDrawerContext";
import { SeverityShieldAndText } from "@app/components/SeverityShieldAndText";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
} from "@app/components/TableControls";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { formatDate } from "@app/utils/utils";
import {VulnerabilityAdvisoryHead} from "@app/client";

interface AdvisoriesByVulnerabilityProps {
  variant?: TableProps["variant"];
  advisories: VulnerabilityAdvisoryHead[];
}

export const AdvisoriesByVulnerability: React.FC<
  AdvisoriesByVulnerabilityProps
> = ({ variant, advisories }) => {
  type RowAction = "showAdvisory";
  const [selectedRowAction, setSelectedRowAction] =
    React.useState<RowAction | null>(null);
  const [selectedRow, setSelectedRow] =
    React.useState<VulnerabilityAdvisoryHead | null>(null);

  const showDrawer = (action: RowAction, row: VulnerabilityAdvisoryHead) => {
    setSelectedRowAction(action);
    setSelectedRow(row);
  };

  //
  const tableControls = useLocalTableControls({
    variant: variant,
    tableName: "advisory-table",
    idProperty: "uuid",
    items: advisories,
    isLoading: false,
    columnNames: {
      identifier: "Identifier",
      title: "Title",
      severity: "Severity",
      published: "Published",
      modified: "Modified",
    },
    hasActionsColumn: false,
    isSortEnabled: false,
    isPaginationEnabled: true,
    initialItemsPerPage: 10,
    isFilterEnabled: false,
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
  } = tableControls;

  return (
    <>
      {tableControls.isFilterEnabled && (
        <Toolbar {...toolbarProps}>
          <ToolbarContent>
            <FilterToolbar showFiltersSideBySide {...filterToolbarProps} />
            <ToolbarItem {...paginationToolbarItemProps}>
              <SimplePagination
                idPrefix="advisory-table"
                isTop
                paginationProps={paginationProps}
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      )}
      <Table {...tableProps} aria-label="Advisory table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "identifier" })} />
              <Th {...getThProps({ columnKey: "title" })} />
              <Th {...getThProps({ columnKey: "severity" })} />
              <Th {...getThProps({ columnKey: "published" })} />
              <Th {...getThProps({ columnKey: "modified" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={undefined}
          isNoData={advisories.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          <Tbody>
            {currentPageItems?.map((item) => {
              return (
                <Tr key={item.identifier} {...getTrProps({ item })}>
                  <Td width={15} {...getTdProps({ columnKey: "identifier" })}>
                    <Button
                      size="sm"
                      variant={ButtonVariant.secondary}
                      onClick={() => showDrawer("showAdvisory", item)}
                    >
                      {item.identifier}
                    </Button>
                  </Td>
                  <Td
                    width={50}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "title" })}
                  >
                    {item.title}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "severity" })}
                  >
                    {item.severity && (
                      <SeverityShieldAndText value={item.severity} />
                    )}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "published" })}
                  >
                    {formatDate(item.published)}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "modified" })}
                  >
                    {formatDate(item.modified)}
                  </Td>
                </Tr>
              );
            })}
          </Tbody>
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="advisory-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />

      <PageDrawerContent
        isExpanded={selectedRowAction !== null}
        onCloseClick={() => setSelectedRowAction(null)}
        pageKey="drawer"
        drawerPanelContentProps={{ defaultSize: "600px" }}
        header={
          <>
            {selectedRowAction === "showAdvisory" && (
              <TextContent>
                <Title headingLevel="h2" size="lg" className={spacing.mtXs}>
                  Advisory
                </Title>
              </TextContent>
            )}
          </>
        }
      >
        {selectedRowAction === "showAdvisory" && (
          <>
            {selectedRow && (
              <AdvisoryInDrawerInfo advisoryId={selectedRow?.uuid} />
            )}
          </>
        )}
      </PageDrawerContent>
    </>
  );
};
