import React from "react";
import { NavLink } from "react-router-dom";

import { Toolbar, ToolbarContent, ToolbarItem } from "@patternfly/react-core";
import { Table, Tbody, Td, Th, Thead, Tr } from "@patternfly/react-table";

import { AdvisoryBase } from "@app/api/models";
import { FilterToolbar } from "@app/components/FilterToolbar";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
} from "@app/components/TableControls";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { formatDate } from "@app/utils/utils";

interface RelatedAdvisoriesProps {
  advisories: AdvisoryBase[];
}

export const RelatedAdvisories: React.FC<RelatedAdvisoriesProps> = ({
  advisories,
}) => {
  const tableControls = useLocalTableControls({
    tableName: "advisory-table",
    idProperty: "uuid",
    items: advisories,
    isLoading: false,
    columnNames: {
      identifier: "Identifier",
      title: "Title",
      severity: "Severity",
      published: "Published",
      modified: "Modified",
    },
    hasActionsColumn: true,
    isSortEnabled: false,
    isPaginationEnabled: true,
    initialItemsPerPage: 10,
    isFilterEnabled: false,
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
  } = tableControls;

  return (
    <>
      {tableControls.isFilterEnabled && (
        <Toolbar {...toolbarProps}>
          <ToolbarContent>
            <FilterToolbar showFiltersSideBySide {...filterToolbarProps} />
            <ToolbarItem {...paginationToolbarItemProps}>
              <SimplePagination
                idPrefix="advisory-table"
                isTop
                paginationProps={paginationProps}
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      )}
      <Table {...tableProps} aria-label="Advisory table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "identifier" })} />
              <Th {...getThProps({ columnKey: "title" })} />
              <Th {...getThProps({ columnKey: "severity" })} />
              <Th {...getThProps({ columnKey: "published" })} />
              <Th {...getThProps({ columnKey: "modified" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={undefined}
          isNoData={advisories.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          <Tbody>
            {currentPageItems?.map((item) => {
              return (
                <Tr key={item.identifier} {...getTrProps({ item })}>
                  <Td width={15} {...getTdProps({ columnKey: "identifier" })}>
                    <NavLink to={`/advisories/${item.uuid}`}>
                      {item.identifier}
                    </NavLink>
                  </Td>
                  <Td
                    width={50}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "title" })}
                  >
                    {item.title}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "severity" })}
                  >
                    {/* <SeverityShieldAndText value={item.severity} /> */}
                    <p style={{ color: "red" }}>issue-381</p>
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "published" })}
                  >
                    {formatDate(item.published)}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "modified" })}
                  >
                    {formatDate(item.modified)}
                  </Td>
                </Tr>
              );
            })}
          </Tbody>
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="advisory-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />
    </>
  );
};
