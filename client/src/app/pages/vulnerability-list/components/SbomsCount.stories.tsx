import type { Meta, StoryObj } from "@storybook/react";
import { SbomsCount } from "./SbomsCount";
import React from "react";
import { handlers } from "@mocks/handlers";
// import { setMockImplementation } from "@mocks/vulnerabilities.mock";
import { sbomsPopulated, MOCK_VULNERABILITIES } from "@mocks/data";
type StoryArgs = {
  vulnerabilityId: string;
};

const meta: Meta<typeof SbomsCount> = {
  title: "Components/VulnerabilityList/SbomsCount",
  component: SbomsCount,
  // decorators: [
  //   (Story, context) => {
  //     const {
  //       parameters: { mockReturnValue },
  //     } = context;
  //     if (mockReturnValue) {
  //       setMockImplementation(mockReturnValue);
  //     }
  //     return <Story />;
  //   },
  // ],
};

export default meta;

type Story = StoryObj<StoryArgs>;

export const LoadingState: Story = {
  args: {
    vulnerabilityId: "CVE-XXXXX",
  },
  parameters: {
    msw: {
      handlers: handlers,
    },
  },
};

export const ErrorState: Story = {
  args: {
    vulnerabilityId: "CVE-XXXXX",
  },
  parameters: {
    mockReturnValue: {
      "CVE-XXXXX": {
        vulnerability: null,
        isFetching: false,
        fetchError: "Error fetching data",
      },
    },
    msw: {
      handlers: handlers,
    },
  },
};

export const PopulatedState: Story = {
  args: {
    vulnerabilityId: "CVE-XXXXX",
  },
  parameters: {
    mockReturnValue: sbomsPopulated, // use mock
  },
};
