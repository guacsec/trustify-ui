import React from "react";
import { NavLink } from "react-router-dom";

import { AxiosError } from "axios";

import {
  ActionsColumn,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import { VulnerabilitySummary } from "@app/client";
import { NotificationsContext } from "@app/components/NotificationsContext";
import { SeverityShieldAndText } from "@app/components/SeverityShieldAndText";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { useDeleteVulnerabilityMutation } from "@app/queries/vulnerabilities";
import { formatDate } from "@app/utils/utils";

import { VulnerabilitySearchContext } from "./vulnerability-context";

export const VulnerabilityTable: React.FC = () => {
  const { pushNotification } = React.useContext(NotificationsContext);

  const { isFetching, fetchError, totalItemCount, tableControls } =
    React.useContext(VulnerabilitySearchContext);

  const onDeleteVulnerabilitySuccess = (sbom: VulnerabilitySummary) => {
    pushNotification({
      title: `The Vulnerability ${sbom.identifier} was deleted`,
      variant: "danger",
    });
  };

  const onDeleteVulnerabilityError = (_error: AxiosError) => {
    pushNotification({
      title: "Error occurred while deleting the vulnerability",
      variant: "danger",
    });
  };

  const deleteVulnerabilityByIdMutation = useDeleteVulnerabilityMutation(
    onDeleteVulnerabilitySuccess,
    onDeleteVulnerabilityError
  );

  const {
    numRenderedColumns,
    currentPageItems,
    propHelpers: {
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
      getExpandedContentTdProps,
    },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  return (
    <>
      <Table {...tableProps} aria-label="vulnerability-table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "name" })} />
              <Th {...getThProps({ columnKey: "description" })} />
              <Th {...getThProps({ columnKey: "cvss" })} />
              <Th {...getThProps({ columnKey: "published" })} />
              <Th {...getThProps({ columnKey: "packages" })} />
              <Th {...getThProps({ columnKey: "sboms" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={isFetching}
          isError={!!fetchError}
          isNoData={totalItemCount === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems.map((item, rowIndex) => {
            return (
              <Tbody key={item.identifier} isExpanded={isCellExpanded(item)}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td width={15} {...getTdProps({ columnKey: "name" })}>
                      <NavLink to={`/vulnerabilities/${item.identifier}`}>
                        {item.identifier}
                      </NavLink>
                    </Td>
                    <Td
                      width={45}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "description" })}
                    >
                      {item.title || item.description}
                    </Td>
                    <Td width={10} {...getTdProps({ columnKey: "cvss" })}>
                      {item.average_severity && (
                        <SeverityShieldAndText value={item.average_severity} />
                      )}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "published" })}
                    >
                      {formatDate(item?.published)}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "packages" })}
                    ></Td>
                    <Td width={10} {...getTdProps({ columnKey: "sboms" })}></Td>
                    <Td isActionCell>
                      <ActionsColumn
                        items={[
                          {
                            title: "Delete",
                            onClick: () => {
                              return deleteVulnerabilityByIdMutation.mutate(
                                item.identifier
                              );
                            },
                          },
                        ]}
                      />
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="vulnerability-table"
        isTop={false}
        isCompact
        paginationProps={paginationProps}
      />
    </>
  );
};
