import React from "react";
import { NavLink } from "react-router-dom";

import {
  Card,
  CardBody,
  CardTitle,
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  Grid,
  GridItem,
  PageSection,
  PageSectionVariants,
  Text,
  TextContent,
  Toolbar,
  ToolbarContent,
  ToolbarItem,
} from "@patternfly/react-core";
import {
  ActionsColumn,
  ExpandableRowContent,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import { TablePersistenceKeyPrefixes } from "@app/Constants";
import { FilterToolbar, FilterType } from "@app/components/FilterToolbar";
import { LoadingWrapper } from "@app/components/LoadingWrapper";
import { SeverityShieldAndText } from "@app/components/SeverityShieldAndText";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import {
  getHubRequestParams,
  useTableControlProps,
  useTableControlState,
} from "@app/hooks/table-controls";
import { useSelectionState } from "@app/hooks/useSelectionState";
import {
  useDeleteVulnerabilityMutation,
  useFetchVulnerabilities,
  useFetchVulnerabilityById,
} from "@app/queries/vulnerabilities";
import { formatDate } from "@app/utils/utils";
import { AdvisoriesByVulnerability } from "../vulnerability-details/advisories-by-vulnerability";
import { PackagesByVulnerability } from "../vulnerability-details/packages-by-vulnerability";
import { SbomsByVulnerability } from "../vulnerability-details/sboms-by-vulnerability";
import {useNotifyErrorCallback} from "@app/hooks/useNotifyErrorCallback";

export const VulnerabilityList: React.FC = () => {
  const tableControlState = useTableControlState({
    tableName: "vulnerability",
    persistenceKeyPrefix: TablePersistenceKeyPrefixes.vulnerabilities,
    columnNames: {
      identifier: "Identifier",
      title: "Title",
      severity: "Severity",
      packages: "Packages",
      sboms: "SBOMs",
      advisories: "Advisories",
    },
    isPaginationEnabled: true,
    isSortEnabled: true,
    sortableColumns: [],
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
      },
      {
        categoryKey: "average_severity",
        title: "Severity",
        placeholderText: "Severity",
        type: FilterType.multiselect,
        selectOptions: [
          { value: "none", label: "None" },
          { value: "low", label: "Low" },
          { value: "medium", label: "Medium" },
          { value: "high", label: "High" },
          { value: "critical", label: "Critical" },
        ],
      },
    ],
    isExpansionEnabled: true,
    expandableVariant: "compound",
  });

  const {
    result: { data: advisories, total: totalItemCount },
    isFetching,
    fetchError,
  } = useFetchVulnerabilities(
    getHubRequestParams({
      ...tableControlState,
      hubSortFieldKeys: {
        identifier: "identifier",
        severity: "average_score",
      },
    })
  );

  const deleteVulnerabilityByIdMutation = useDeleteVulnerabilityMutation(
    useNotifyErrorCallback("Error occurred while deleting the vulnerability")
  );

  const tableControls = useTableControlProps({
    ...tableControlState,
    idProperty: "identifier",
    currentPageItems: advisories,
    totalItemCount,
    isLoading: isFetching,
    selectionState: useSelectionState({
      items: advisories,
      isEqual: (a, b) => a.identifier === b.identifier,
    }),
  });

  const {
    numRenderedColumns,
    currentPageItems,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
      getExpandedContentTdProps,
    },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  return (
    <>
      <PageSection variant={PageSectionVariants.light}>
        <TextContent>
          <Text component="h1">Vulnerabilities</Text>
        </TextContent>
      </PageSection>
      <PageSection>
        <div
          style={{
            backgroundColor: "var(--pf-v5-global--BackgroundColor--100)",
          }}
        >
          <Toolbar {...toolbarProps}>
            <ToolbarContent>
              <FilterToolbar showFiltersSideBySide {...filterToolbarProps} />
              <ToolbarItem {...paginationToolbarItemProps}>
                <SimplePagination
                  idPrefix="vulnerability-table"
                  isTop
                  paginationProps={paginationProps}
                />
              </ToolbarItem>
            </ToolbarContent>
          </Toolbar>

          <Table {...tableProps} aria-label="Vulnerability table">
            <Thead>
              <Tr>
                <TableHeaderContentWithControls {...tableControls}>
                  <Th {...getThProps({ columnKey: "identifier" })} />
                  <Th {...getThProps({ columnKey: "title" })} />
                  <Th {...getThProps({ columnKey: "severity" })} />
                  <Th {...getThProps({ columnKey: "packages" })} />
                  <Th {...getThProps({ columnKey: "sboms" })} />
                  <Th {...getThProps({ columnKey: "advisories" })} />
                </TableHeaderContentWithControls>
              </Tr>
            </Thead>
            <ConditionalTableBody
              isLoading={isFetching}
              isError={!!fetchError}
              isNoData={totalItemCount === 0}
              numRenderedColumns={numRenderedColumns}
            >
              {currentPageItems.map((item, rowIndex) => {
                return (
                  <Tbody
                    key={item.identifier}
                    isExpanded={isCellExpanded(item)}
                  >
                    <Tr {...getTrProps({ item })}>
                      <TableRowContentWithControls
                        {...tableControls}
                        item={item}
                        rowIndex={rowIndex}
                      >
                        <Td
                          width={15}
                          {...getTdProps({
                            columnKey: "identifier",
                            isCompoundExpandToggle: true,
                            item: item,
                            rowIndex,
                          })}
                        >
                          <NavLink to={`/vulnerabilities/${item.identifier}`}>
                            {item.identifier}
                          </NavLink>
                        </Td>
                        <Td
                          width={45}
                          modifier="truncate"
                          {...getTdProps({ columnKey: "title" })}
                        >
                          {item.title || item.description}
                        </Td>
                        <Td
                          width={10}
                          {...getTdProps({ columnKey: "severity" })}
                        >
                          {item.average_severity && (
                            <SeverityShieldAndText
                              value={item.average_severity}
                            />
                          )}
                        </Td>
                        <Td
                          width={10}
                          modifier="truncate"
                          {...getTdProps({
                            columnKey: "packages",
                            isCompoundExpandToggle: true,
                            item: item,
                            rowIndex,
                          })}
                        >
                          Packages
                        </Td>
                        <Td
                          width={10}
                          modifier="truncate"
                          {...getTdProps({
                            columnKey: "sboms",
                            isCompoundExpandToggle: true,
                            item: item,
                            rowIndex,
                          })}
                        >
                          SBOMs
                        </Td>
                        <Td
                          width={10}
                          {...getTdProps({
                            columnKey: "advisories",
                            isCompoundExpandToggle: true,
                            item: item,
                            rowIndex,
                          })}
                        >
                          Advisories
                        </Td>
                        <Td isActionCell>
                          <ActionsColumn
                            items={[
                              {
                                title: "Delete",
                                onClick: () =>
                                  deleteVulnerabilityByIdMutation.mutate(
                                    item.identifier
                                  ),
                              },
                            ]}
                          />
                        </Td>
                      </TableRowContentWithControls>
                    </Tr>
                    {isCellExpanded(item) ? (
                      <Tr isExpanded>
                        <Td
                          {...getExpandedContentTdProps({
                            item,
                          })}
                        >
                          <ExpandableRowContent>
                            <div className="pf-v5-u-m-md">
                              {isCellExpanded(item, "identifier") ? (
                                <>
                                  <Grid hasGutter>
                                    <GridItem md={8}>
                                      <Card isFullHeight isCompact>
                                        <CardTitle>General view</CardTitle>
                                        <CardBody>
                                          <DescriptionList
                                            columnModifier={{
                                              default: "2Col",
                                            }}
                                          >
                                            <DescriptionListGroup>
                                              <DescriptionListTerm>
                                                Published
                                              </DescriptionListTerm>
                                              <DescriptionListDescription>
                                                {formatDate(item.published)}
                                              </DescriptionListDescription>
                                            </DescriptionListGroup>
                                            <DescriptionListGroup>
                                              <DescriptionListTerm>
                                                Modified
                                              </DescriptionListTerm>
                                              <DescriptionListDescription>
                                                {formatDate(item.modified)}
                                              </DescriptionListDescription>
                                            </DescriptionListGroup>
                                            <DescriptionListGroup>
                                              <DescriptionListTerm>
                                                Released
                                              </DescriptionListTerm>
                                              <DescriptionListDescription>
                                                {formatDate(item.released)}
                                              </DescriptionListDescription>
                                            </DescriptionListGroup>
                                            <DescriptionListGroup>
                                              <DescriptionListTerm>
                                                Withdrawn
                                              </DescriptionListTerm>
                                              <DescriptionListDescription>
                                                {formatDate(item.withdrawn)}
                                              </DescriptionListDescription>
                                            </DescriptionListGroup>
                                          </DescriptionList>
                                        </CardBody>
                                      </Card>
                                    </GridItem>
                                    <GridItem md={4}>
                                      <Card isFullHeight isCompact>
                                        <CardTitle>Additional info</CardTitle>
                                        <CardBody>
                                          <DescriptionList>
                                            <DescriptionListGroup>
                                              <DescriptionListTerm>
                                                CWE
                                              </DescriptionListTerm>
                                              <DescriptionListDescription>
                                                {item.cwe}
                                              </DescriptionListDescription>
                                            </DescriptionListGroup>
                                            <DescriptionListGroup>
                                              <DescriptionListTerm>
                                                Non normative
                                              </DescriptionListTerm>
                                              <DescriptionListDescription>
                                                {item.normative ? "Yes" : "No"}
                                              </DescriptionListDescription>
                                            </DescriptionListGroup>
                                          </DescriptionList>
                                        </CardBody>
                                      </Card>
                                    </GridItem>
                                  </Grid>
                                </>
                              ) : null}
                              {isCellExpanded(item, "packages") ? (
                                <>
                                  <PackagesByVulnerabilityWrapper
                                    vulnerabilityId={item.identifier}
                                  />
                                </>
                              ) : null}
                              {isCellExpanded(item, "sboms") ? (
                                <>
                                  <SbomsByVulnerabilityWrapper
                                    vulnerabilityId={item.identifier}
                                  />
                                </>
                              ) : null}
                              {isCellExpanded(item, "advisories") ? (
                                <>
                                  <AdvisoriesByVulnerability
                                    variant="compact"
                                    advisories={item.advisories}
                                  />
                                </>
                              ) : null}
                            </div>
                          </ExpandableRowContent>
                        </Td>
                      </Tr>
                    ) : null}
                  </Tbody>
                );
              })}
            </ConditionalTableBody>
          </Table>
          <SimplePagination
            idPrefix="vulnerability-table"
            isTop={false}
            isCompact
            paginationProps={paginationProps}
          />
        </div>
      </PageSection>
    </>
  );
};

export const PackagesByVulnerabilityWrapper: React.FC<{
  vulnerabilityId: string;
}> = ({ vulnerabilityId }) => {
  const { vulnerability, isFetching, fetchError } =
    useFetchVulnerabilityById(vulnerabilityId);
  return (
    <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
      <PackagesByVulnerability
        variant="compact"
        initialItemsPerPage={5}
        advisories={vulnerability?.advisories ?? []}
      />
    </LoadingWrapper>
  );
};

export const SbomsByVulnerabilityWrapper: React.FC<{
  vulnerabilityId: string;
}> = ({ vulnerabilityId }) => {
  const { vulnerability, isFetching, fetchError } =
    useFetchVulnerabilityById(vulnerabilityId);
  return (
    <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
      <SbomsByVulnerability
        variant="compact"
        advisories={vulnerability?.advisories ?? []}
      />
    </LoadingWrapper>
  );
};
