import React from "react";
import { Link } from "react-router-dom";

import {
  Breadcrumb,
  BreadcrumbItem,
  Button,
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  Divider,
  PageSection,
  Split,
  SplitItem,
  Stack,
  StackItem,
  Tab,
  TabTitleText,
  Tabs,
  Text,
  TextContent,
  Truncate,
} from "@patternfly/react-core";
import DownloadIcon from "@patternfly/react-icons/dist/esm/icons/download-icon";

import dayjs from "dayjs";

import { RENDER_DATE_FORMAT } from "@app/Constants";
import { PathParam, useRouteParams } from "@app/Routes";

import { useFetchCVEById } from "@app/queries/cves";
import { SeverityShieldAndText } from "@app/components/SeverityShieldAndText";
import { useDownload } from "@app/hooks/useDownload";

import { RelatedAdvisories } from "./related-advisories";
import { RelatedSBOMs } from "./related-sboms";
import { LoadingWrapper } from "@app/components/LoadingWrapper";
import { Source } from "./source";

export const CveDetails: React.FC = () => {
  const cveId = useRouteParams(PathParam.CVE_ID);

  const { cve, isFetching, fetchError } = useFetchCVEById(cveId);

  const { downloadCVE } = useDownload();

  return (
    <>
      <PageSection variant="light" type="breadcrumb">
        <Breadcrumb>
          <BreadcrumbItem key="cves">
            <Link to="/cves">CVEs</Link>
          </BreadcrumbItem>
          <BreadcrumbItem to="#" isActive>
            CVE details
          </BreadcrumbItem>
        </Breadcrumb>
      </PageSection>
      <PageSection variant="light">
        <Stack hasGutter>
          <StackItem>
            <Split hasGutter>
              <SplitItem>
                <TextContent>
                  <Text component="h1">{cveId}</Text>
                </TextContent>
              </SplitItem>
              <SplitItem isFilled>
                {cve && <SeverityShieldAndText value={cve.severity} />}
              </SplitItem>
              <SplitItem>
                <Button
                  variant="secondary"
                  onClick={() => {
                    if (cveId) {
                      downloadCVE(cveId);
                    }
                  }}
                >
                  <DownloadIcon /> Download
                </Button>
              </SplitItem>
            </Split>
          </StackItem>
          <Divider />
          {cve && <StackItem>{cve.title}</StackItem>}
          {cve && (
            <StackItem>
              <Truncate content={cve.description} />
            </StackItem>
          )}
          <StackItem>
            <DescriptionList columnModifier={{ lg: "3Col" }}>
              <DescriptionListGroup>
                <DescriptionListTerm>Reserved</DescriptionListTerm>
                <DescriptionListDescription>
                  {cve
                    ? dayjs(cve.date_reserved).format(RENDER_DATE_FORMAT)
                    : ""}
                </DescriptionListDescription>
              </DescriptionListGroup>
              <DescriptionListGroup>
                <DescriptionListTerm>Published date</DescriptionListTerm>
                <DescriptionListDescription>
                  {cve
                    ? dayjs(cve.date_released).format(RENDER_DATE_FORMAT)
                    : ""}
                </DescriptionListDescription>
              </DescriptionListGroup>
              <DescriptionListGroup>
                <DescriptionListTerm>Last modified</DescriptionListTerm>
                <DescriptionListDescription>
                  {cve
                    ? dayjs(cve.date_updated).format(RENDER_DATE_FORMAT)
                    : ""}
                </DescriptionListDescription>
              </DescriptionListGroup>
            </DescriptionList>
          </StackItem>
          <Divider />
          <StackItem>
            <Tabs defaultActiveKey={0} aria-label="CVE tabs" role="region">
              <Tab
                eventKey={0}
                title={<TabTitleText>Related products</TabTitleText>}
              >
                <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
                  {cve && <RelatedSBOMs sboms={cve.related_sboms} />}
                </LoadingWrapper>
              </Tab>
              <Tab
                eventKey={1}
                title={<TabTitleText>Related advisories</TabTitleText>}
              >
                <LoadingWrapper isFetching={isFetching} fetchError={fetchError}>
                  {cve && (
                    <RelatedAdvisories advisories={cve.related_advisories} />
                  )}
                </LoadingWrapper>
              </Tab>
              <Tab eventKey={2} title={<TabTitleText>Source</TabTitleText>}>
                {cveId && <Source cveId={cveId} />}
              </Tab>
            </Tabs>
          </StackItem>
        </Stack>
      </PageSection>
    </>
  );
};
