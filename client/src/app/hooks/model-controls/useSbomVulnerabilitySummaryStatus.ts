import React from "react";

import {
  AdvisoryWithinSbom,
  SBOM,
  VulnerabilityIndex,
  VulnerabilityStatus,
} from "@app/api/models";
import { getVulnerabilityById } from "@app/api/rest";

interface VulnerabilitySummaryStatus {
  vulnerabilityId: string;
  advisory: AdvisoryWithinSbom;
  status: VulnerabilityStatus;
  packages: {
    id: string;
    name: string;
    version: string;
  }[];
  vulnerability: VulnerabilityIndex | null;
}

export const useSbomVulnerabilitySummaryStatus = (sbom: SBOM) => {
  const [allVulnerabilities, setAllVulnerabilities] = React.useState<
    VulnerabilitySummaryStatus[]
  >([]);
  const [vulnerabilitiesById, setVulnerabilitiesById] = React.useState<
    Map<string, VulnerabilityIndex>
  >(new Map());
  const [isFetching, setIsFetching] = React.useState(false);

  const [allAdvisoryStatus, setAllAdvisoryStatus] = React.useState<
    Set<VulnerabilityStatus>
  >(new Set());

  React.useEffect(() => {
    const vulnerabilities: VulnerabilitySummaryStatus[] = (
      sbom?.advisories ?? []
    )
      .flatMap((advisory) => {
        return advisory.status.map((status) => {
          const result: VulnerabilitySummaryStatus = {
            vulnerabilityId: status.vulnerability_id,
            status: status.status,
            packages: [...status.packages],
            advisory: { ...advisory },
            vulnerability: null,
          };
          return result;
        });
      })
      .reduce((prev, current) => {
        const exists = prev.find(
          (item) =>
            item.vulnerabilityId === current.vulnerabilityId &&
            item.advisory.uuid === current.advisory.uuid
        );
        if (!exists) {
          return [...prev, current];
        } else {
          return prev;
        }
      }, [] as VulnerabilitySummaryStatus[]);

    const allUniqueStatus = new Set<VulnerabilityStatus>();
    vulnerabilities.forEach((item) => allUniqueStatus.add(item.status));

    setAllVulnerabilities(vulnerabilities);
    setAllAdvisoryStatus(allUniqueStatus);
    setIsFetching(true);

    Promise.all(
      vulnerabilities
        .map((item) => getVulnerabilityById(item.vulnerabilityId))
        .map((vulnerability) => vulnerability.catch(() => null))
    ).then((vulnerabilities) => {
      const validVulnerabilities = vulnerabilities.reduce((prev, current) => {
        if (current) {
          return [...prev, current];
        } else {
          // Filter out error responses
          return prev;
        }
      }, [] as VulnerabilityIndex[]);

      const vulnerabilitiesById = new Map<string, VulnerabilityIndex>();
      validVulnerabilities.forEach((vulnerability) =>
        vulnerabilitiesById.set(vulnerability.identifier, vulnerability)
      );

      setVulnerabilitiesById(vulnerabilitiesById);
      setIsFetching(false);
    });
  }, [sbom]);

  const summaryStatus = React.useMemo(() => {
    return allVulnerabilities.map((item) => {
      const result: VulnerabilitySummaryStatus = {
        ...item,
        vulnerability: vulnerabilitiesById.get(item.vulnerabilityId) ?? null,
      };
      return result;
    });
  }, [allVulnerabilities, vulnerabilitiesById]);

  return {
    isFetching,
    availableStatus: allAdvisoryStatus,
    summary: summaryStatus,
  };
};
