import React from "react";

import { VulnerabilityStatus } from "@app/api/models";
import { SbomHead, VulnerabilityAdvisorySummary } from "@app/client";
import { useFetchVulnerabilityById } from "@app/queries/vulnerabilities";

const areSbomOfVulnerabilityEqual = (
  a: SbomOfVulnerability,
  b: SbomOfVulnerability | FlatSbomOfVulnerability
) => {
  return a.sbom.id === b.sbom.id && a.sbomStatus === b.sbomStatus;
};

interface FlatSbomOfVulnerability {
  sbom: SbomHead & { version: string | null };
  sbomStatus: VulnerabilityStatus;
  advisory: VulnerabilityAdvisorySummary;
}

interface SbomOfVulnerability {
  sbom: SbomHead & { version: string | null };
  sbomStatus: VulnerabilityStatus;
  relatedPackages: {
    advisory: VulnerabilityAdvisorySummary;
  }[];
}

export interface SbomOfVulnerabilitySummary {
  total: number;
  sbomStatus: { [key in VulnerabilityStatus]: number };
}

const DEFAULT_SUMMARY: SbomOfVulnerabilitySummary = {
  total: 0,
  sbomStatus: { affected: 0, fixed: 0, known_not_affected: 0, not_affected: 0 },
};

const advisoryToModels = (advisories: VulnerabilityAdvisorySummary[]) => {
  const sboms = advisories.flatMap((advisory) => {
    return (
      (advisory.sboms ?? [])
        .flatMap((sbomStatuses) => {
          return sbomStatuses.status.map((sbomStatus) => {
            const result: FlatSbomOfVulnerability = {
              sbom: {
                ...sbomStatuses,
                version: sbomStatuses.version || null,
              },
              sbomStatus: sbomStatus as VulnerabilityStatus,
              advisory: advisory,
            };
            return result;
          });
        })
        // group
        .reduce((prev, current) => {
          const existingElement = prev.find((item) => {
            return areSbomOfVulnerabilityEqual(item, current);
          });

          if (existingElement) {
            const arrayWithoutExistingItem = prev.filter(
              (item) => !areSbomOfVulnerabilityEqual(item, existingElement)
            );

            const updatedItemInArray: SbomOfVulnerability = {
              ...existingElement,
              relatedPackages: [
                ...existingElement.relatedPackages,
                {
                  advisory: current.advisory,
                },
              ],
            };

            return [...arrayWithoutExistingItem, updatedItemInArray];
          } else {
            const newItemInArray: SbomOfVulnerability = {
              sbom: current.sbom,
              sbomStatus: current.sbomStatus,
              relatedPackages: [
                {
                  advisory: current.advisory,
                },
              ],
            };
            return [...prev, newItemInArray];
          }
        }, [] as SbomOfVulnerability[])
    );
  });

  const summary = sboms.reduce((prev, current) => {
    const sbomStatus = current.sbomStatus;
    return {
      ...prev,
      total: prev.total + 1,
      sbomStatus: {
        ...prev.sbomStatus,
        [sbomStatus]: prev.sbomStatus[sbomStatus] + 1,
      },
    };
  }, DEFAULT_SUMMARY);

  return {
    sboms,
    summary,
  };
};

export const useSbomsOfVulnerability = (sbomId: string) => {
  const {
    vulnerability,
    isFetching: isFetchingAdvisories,
    fetchError: fetchErrorAdvisories,
  } = useFetchVulnerabilityById(sbomId);

  const result = React.useMemo(() => {
    return advisoryToModels(vulnerability?.advisories || []);
  }, [vulnerability]);

  return {
    data: result,
    isFetching: isFetchingAdvisories,
    fetchError: fetchErrorAdvisories,
  };
};
