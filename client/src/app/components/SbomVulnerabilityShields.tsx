import React from "react";

import { Skeleton } from "@patternfly/react-core";

import { SBOM, Severity } from "@app/api/models";
import { useSbomVulnerabilitySummaryStatus } from "@app/hooks/model-controls/useSbomVulnerabilitySummaryStatus";

import { VulnerabilityGallery } from "./VulnerabilityGallery";

export interface SbomVulnerabilityShieldsProps {
  sbom: SBOM;
}

export const SbomVulnerabilityShields: React.FC<
  SbomVulnerabilityShieldsProps
> = ({ sbom }) => {
  const { isFetching, summary } = useSbomVulnerabilitySummaryStatus(sbom);

  const severities = React.useMemo(() => {
    return summary
      .filter((item) => item.status === "affected")
      .reduce(
        (prev, current) => {
          if (current.vulnerability?.average_severity) {
            const severity = current.vulnerability?.average_severity;
            const count = prev[severity] ?? 0 + 1;
            return {
              ...prev,
              [severity]: count,
            };
          } else {
            return prev;
          }
        },
        {} as { [key in Severity]: number }
      );
  }, [summary]);

  if (isFetching) {
    return <Skeleton screenreaderText="Loading contents" />;
  } else {
    return <VulnerabilityGallery severities={severities} />;
  }
};
